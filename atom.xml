<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Joseph Bulger]]></title>
  <link href="http://josephbulger.com/atom.xml" rel="self"/>
  <link href="http://josephbulger.com/"/>
  <updated>2014-02-23T18:22:36-05:00</updated>
  <id>http://josephbulger.com/</id>
  <author>
    <name><![CDATA[Joseph Bulger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gotchya: Enumerable side effect I didn't see coming]]></title>
    <link href="http://josephbulger.com/blog/2014/02/23/gotchya-enumerable-side-effect-i-didnt-see-coming/"/>
    <updated>2014-02-23T18:00:24-05:00</updated>
    <id>http://josephbulger.com/blog/2014/02/23/gotchya-enumerable-side-effect-i-didnt-see-coming</id>
    <content type="html"><![CDATA[<p>I was working on a feature recently when I came across a behavior that I wanted to highlight.</p>

<!-- more -->


<p>I was doing something like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">newOrder</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="kt">var</span> <span class="n">thing</span> <span class="k">in</span> <span class="n">someListImOrdering</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">theOldThing</span> <span class="p">=</span> <span class="n">someOtherListToLookAt</span>
</span><span class='line'>      <span class="p">.</span><span class="n">First</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">OrderNumber</span> <span class="p">==</span> <span class="n">newOrder</span><span class="p">++);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I was expecting this to basically look through an enumeration and pull out the old thing that used to have the old order number that I am about to assign to the new thing that I&rsquo;m ordering, and then afterwards bump up my <code>newOrder</code> counter.</p>

<p>So let&rsquo;s say that I&rsquo;m looping through <code>someListImOrdering</code> and it has around 20 items, then I expected <code>newOrder</code> to go from 0 to 19.</p>

<p>However, if you look closely enough you can probably guess what will actually happen.</p>

<p>What it will actually do is bump up <code>newOrder</code> not only for every item in <code>someListImOrdering</code>, but during that iteration it will then bump it up subsequently while doing the <code>First</code> until it finds the thing it was looking for.</p>

<p>In my run, instead of getting <code>newOrder</code> to 19, it ended up at around 400 or so, because that&rsquo;s how many iterations I ended up going through by processing this foreach loop.</p>

<p>Lesson of the day, watch what you do when you iterate through your enumerables.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The New Build]]></title>
    <link href="http://josephbulger.com/blog/2013/05/27/the-new-build/"/>
    <updated>2013-05-27T06:20:00-04:00</updated>
    <id>http://josephbulger.com/blog/2013/05/27/the-new-build</id>
    <content type="html"><![CDATA[<p>I just recently built a new computer. I decided to go middle of the road on this one, and build something that I anticipate will last me around 2 to 3 years. So far I am completely <strong>loving</strong> this build.</p>

<p>Let&rsquo;s get into the nuts and bolts. <!-- more --></p>

<h3>The Case</h3>

<p>First things first, what is this new build going to sit inside of. This go around I decided to get a Cooler Master HAF X case. Specifically <a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16811119225">this one</a>.</p>

<h3>AMD Build</h3>

<p>I went with an AMD build for a couple of reasons. First and foremost, because AMD recently received a set of processors that go up to 8 core, and are prepackaged overclocked, all for around $200. Getting an Intel 8 core is guaranteed to run you more than that. Price is a major factor here. I know that each AMD core is not nearly as powerful as an Intel core, but I&rsquo;m banking on the idea that it&rsquo;s powerful enough for what I&rsquo;m trying to accomplish, and that running a multi-core architecture is more in line with how I use my computer. The processor I ended up choosing was a <a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16819113284">FX-8350 Vishera</a>.</p>

<h3>Board</h3>

<p>I got an <a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16813131969">ASUS SABERTOOTH 990FX/GEN3</a>. Key factors on this one was the fact that it runs the Vishera smoothly. The fact that it has PCI-E 3 lanes was an added bonus, even if it&rsquo;s not <strong>true</strong> PCI-E 3 because it&rsquo;s stealing the lanes from the other slots. That&rsquo;s fine for me because I&rsquo;m only going to use 2 slots on those lanes anyway.</p>

<h3>Graphics</h3>

<p>I have two cross fired <a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16814150605">Radeon HD 7870</a>. They are un.. fricking&hellip; believable. These two things crossfired together make all the games I currently own <strong>scream</strong>. They should keep me entertained for a really long time.</p>

<h3>RAM</h3>

<p>I went with 32 GB of <a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16820231610">GSkill RAM</a>. Timings on them were 9-9-9-24. An interesting thing about the RAM. When I first booted my computer, the RAM LED was giving me errors on boot. Turns out that I didn&rsquo;t put the RAM all the way into the slot because the motherboard had only one latch on each slot (on the top) and not on the on the bottom. I had to put each RAM into the slot at the bottom first, then put it in the top, put the latch down, and then go back to the bottom and push it back on the bottom again.</p>

<h3>Hard Drives</h3>

<p>Only other things of note I think is how I set up my hard drives.</p>

<p>I have a <a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16820147193">256 GB SSD</a> boot drive. On top of that I have a <a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16822136555">VelociRaptor drive</a> for all my programs. I followed all of that up with 2 <a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16822148844">3 TB drives</a> in a RAID 1 configuration. I set up the RAID via hardware controllers through BIOS. Only tricky thing about that was I had to install windows on the SSD with the RAID drivers loaded so I could boot the SSD via RAID setup even though it wasn&rsquo;t configured for it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping your code small]]></title>
    <link href="http://josephbulger.com/blog/2013/04/27/keep-methods-small/"/>
    <updated>2013-04-27T09:25:50-04:00</updated>
    <id>http://josephbulger.com/blog/2013/04/27/keep-methods-small</id>
    <content type="html"><![CDATA[<p>I&rsquo;m starting to put together a video series on code quality. This is aimed at helping my teams produce code more effectively by utilizing good programming principles.</p>

<!-- more -->


<p>Here&rsquo;s the first video in the series. It&rsquo;s centered around keeping methods small.</p>

<p><video width='720' height='403' preload='none' controls poster=''><source src='http://www.youtube.com/embed/l0tAXE3Xoso' ></video></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The New Blog]]></title>
    <link href="http://josephbulger.com/blog/2012/10/08/the-new-blog/"/>
    <updated>2012-10-08T11:22:40-04:00</updated>
    <id>http://josephbulger.com/blog/2012/10/08/the-new-blog</id>
    <content type="html"><![CDATA[<p>So I&rsquo;ve created a new blog. It&rsquo;s built using <a href="http://nodejs.org">nodejs</a> and so far I&rsquo;m really liking it.</p>

<!-- more -->


<p>The part that I&rsquo;m really digging is that I build my articles now using markdown files, so I can write up a markdown file from basically anywhere, then upload it and voila, instantly on my blog.</p>

<p>It&rsquo;s also really nice to be able to modify my blog as I see fit right down to the metal.</p>

<p>And on top of all that, it&rsquo;s also a <strong>lot</strong> faster than my other blog, which was on PHP using wordpress.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Kit on a MBP]]></title>
    <link href="http://josephbulger.com/blog/2012/10/08/installing-kit-on-a-mbp/"/>
    <updated>2012-10-08T11:22:40-04:00</updated>
    <id>http://josephbulger.com/blog/2012/10/08/installing-kit-on-a-mbp</id>
    <content type="html"><![CDATA[<p><a href="http://www.moncefbelyamani.com/how-to-install-xcode-homebrew-git-rvm-ruby-on-mac/">This article</a> was invaluable to me when I was confronted with the task of installing a slew of development tools on my new MacBook Pro.</p>

<!-- more -->


<p>This runs you threw installing the following items:</p>

<ul>
<li><p>Xcode</p></li>
<li><p>Homebrew</p></li>
<li><p>Git</p></li>
<li><p>RVM</p></li>
<li><p>Ruby 1.9.3</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practicing the Basics]]></title>
    <link href="http://josephbulger.com/blog/2012/08/30/practicing-the-basics/"/>
    <updated>2012-08-30T14:18:16-04:00</updated>
    <id>http://josephbulger.com/blog/2012/08/30/practicing-the-basics</id>
    <content type="html"><![CDATA[<p>It can&rsquo;t be over stated how important it is for your teams to practice the basics.</p>

<p>With my teams, I spend a good bit of time showing them how to do what are known as &ldquo;katas&rdquo;. What is the point behind these short excercises? Let me tell you a story.</p>

<p>When I was fifteen, I joined my high school chess team. Yeah, I was a chess nerd. There was one particular tournament I went to with a couple of my friends and my coach that I&rsquo;ll never forget.</p>

<!-- more -->


<p>I think it was actually my first real tournament. I was still very new to the idea of being on a chess team, but I had been playing chess or a while at that point. At the tournament I was doing fairly well. I was definitely exceeding the expectations that I had for myself. Towards the end of the day, I was matched up with another kid around my age, and again, I was doing well. However, I had reached a point where I was decidedly winning when something really bad happened. My opponent had nothing left except for his king, and I was down to my rook and king.</p>

<p>Under normal circumstances this would have spelled the end for my opponent, but that day something happened. I forgot how to mate with a rook. It wasn&rsquo;t that I didn&rsquo;t know how to do it. I knew very well how to do it. My mind simply blanked. It left my mental space entirely and I was left with an utterly blank stare on my face. I scrounged around trying to reign it back in and get my head around what I was doing. I was nervous, because if my opponent knew what he was doing he could force a draw simply by staying away from check long enough. Luckily, he didn&rsquo;t know how to do that, and put himself into a position that I was able to mate him. Crisis averted.</p>

<p>That&rsquo;s when people started coming to me. One person congratulated me, but then started showing me how to mate with a rook. Based on the way I was playing, it was obvious to everyone that I didn&rsquo;t know how to mate with a rook. The problem was, I did. So why didn&rsquo;t I do it.</p>

<p>Practice.</p>

<p>I was young. I didn&rsquo;t practice a lot on my mechanics. I certainly didn&rsquo;t practice enough on end game scenarios. However, the type of practice I&rsquo;m talking about here is a specific kind. I played chess a lot, so I&rsquo;m not talking about general practice, and just getting games under my belt. That wasn&rsquo;t the problem. I&rsquo;m talking about short, focused practice to reenforce specific disciplines on my game.</p>

<p>In this case, end game mating with various pieces. Any good chess player practices these mechanics until they become muscle memory. They don&rsquo;t even have to think how to perform those mates, because it&rsquo;s just part of their being. It becomes part of who they are. I can mate with a rook now without even thinking about it, even though I probably haven&rsquo;t played chess in over 5 years. It&rsquo;s that ingrained in me.</p>

<p>The same thing happens coding katas. The exercises are simple and focused, and designed to teach you a couple disciplines. Usually these disciplines focus around naming things properly, proper code size, refactoring techniques, etc. Notice how none of those things are language specific. They are disciplines that should be taught across any language you write in.</p>

<p>So what are some of these katas that we go through?</p>

<p>I&rsquo;ll have to cover that another day. I&rsquo;m getting a huge urge to play chess all of the sudden.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mental Floss: Days for a Week]]></title>
    <link href="http://josephbulger.com/blog/2011/10/20/mental-floss-days-for-a-week/"/>
    <updated>2011-10-20T04:00:50-04:00</updated>
    <id>http://josephbulger.com/blog/2011/10/20/mental-floss-days-for-a-week</id>
    <content type="html"><![CDATA[<p>So as I build the week up, I&rsquo;m adding Days onto it, but what do they look like?</p>

<!-- more -->


<p>A Day is pretty simple. It has the DateTime that says what actual day it belongs to. It also has a list of Events that belong to it. A Day can also indicate whether or not it&rsquo;s available for reading, or if it has events. This is important because if a day is available, then the UI needs to let the user select that Day, and if it has events, then the day should show those events in the UI.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Day</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">Date</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">&gt;</span> <span class="n">Events</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Day</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Events</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">&gt;();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">bool</span> <span class="nf">HasEvents</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Events</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">AddEvent</span><span class="p">(</span><span class="n">Event</span> <span class="n">eventForDay</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Events</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">eventForDay</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">&gt;</span> <span class="n">GetEvents</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Events</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="nf">GetReadingAvailability</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">IsAvailable</span><span class="p">()</span> <span class="p">?</span> <span class="s">&quot;date_is_available&quot;</span> <span class="p">:</span>
</span><span class='line'>          <span class="n">HasEvents</span><span class="p">()</span> <span class="p">?</span> <span class="s">&quot;date_has_event&quot;</span> <span class="p">:</span> <span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="kt">bool</span> <span class="nf">IsAvailable</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">!</span><span class="n">HasEvents</span><span class="p">()</span> <span class="p">&amp;&amp;</span> <span class="n">IsDayAvailableForReading</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="kt">bool</span> <span class="nf">IsDayAvailableForReading</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">IsDayAvailableForReading</span><span class="p">(</span><span class="n">Date</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="nf">IsDayAvailableForReading</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">dateTime</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">AvailabilityChecker</span><span class="p">()</span>
</span><span class='line'>          <span class="p">.</span><span class="n">IsDayAvailableForReading</span><span class="p">(</span><span class="n">dateTime</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="nf">GetReadableValue</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Date</span><span class="p">.</span><span class="n">ToString</span><span class="p">(</span><span class="s">&quot;MMMM dd, yyyy&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This concludes the implementation of all the pieces necessary to build the ViewModel. The View itself could be built on any technology stack to show UI appropriate to the rules we outlined so far, which is the ultimate goal of having our ViewModel separated from the View itself.</p>

<p>This does <strong>not</strong>, however, tell us what our business rules are, or how their implemented, which is the next part of the series: the Model.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mental Floss: Weeks on the Calendar]]></title>
    <link href="http://josephbulger.com/blog/2011/10/19/mental-floss-weeks-on-the-calendar/"/>
    <updated>2011-10-19T04:00:48-04:00</updated>
    <id>http://josephbulger.com/blog/2011/10/19/mental-floss-weeks-on-the-calendar</id>
    <content type="html"><![CDATA[<p>Now we&rsquo;ve gone through how the <a href="http://josephbulger.com/?p=817">month is modeled</a>, we need to see how weeks are being built.</p>

<!-- more -->


<p>When you first look at the month implementation, you might think that adding days to weeks is a simple matter of adding DateTime&rsquo;s, but what&rsquo;s happening behind the scenes is just a little bit more complicated. Why? Well, we need to track what events belong to what days, so in order to do that we can&rsquo;t just use a simple DateTime, we need something just a little bit more complicated.</p>

<p>My Week looks like this:</p>

<div><script src='https://gist.github.com/1291245.js?file=Week.cs'></script>
<noscript><pre><code>﻿public class Week
{
    public Week()
    {
        Days = new List&lt;Day&gt;();
    }

    protected IList&lt;Day&gt; Days { get; set; }

    public IEnumerable&lt;Day&gt; GetDays()
    {
        return Days;
    }

    public void Add(DateTime day)
    {
        if (!Days.Where(x =&gt; x.Date == day.Date).Any())
            Days.Add(new Day { Date = day });
    }

    public bool IsMissingDays()
    {
        return Days.OrderBy(x =&gt; x.Date)
          .First().Date.DayOfWeek != Calendar.GetStartDay();
    }

    public bool IsMissingTrailingDays()
    {
        return Days.OrderBy(x =&gt; x.Date)
          .First().Date.DayOfWeek != Calendar.GetLastDay();
    }

    public int GetMissingNumberOfDays()
    {
        var missingDays = 0;

        var day = Days.OrderBy(x =&gt; x.Date).First().Date;
        
        do
        {
            day = day.AddDays(-1);
            missingDays++;
        } while (day.DayOfWeek != Calendar.GetStartDay());

        return missingDays;
    }

    public int GetMissingNumberOfTrailingDays()
    {
        var missingDays = 0;

        var day = Days.OrderBy(x =&gt; x.Date).Last().Date;

        do
        {
            day = day.AddDays(1);
            missingDays++;
        } while (day.DayOfWeek != Calendar.GetLastDay());

        return missingDays;
    }
}</code></pre></noscript></div>


<p>When adding days to the week, I accept a DateTime and then build a list of Days into the Week. Later on, the calendar will add Events to these Days.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gist @ GitHub and why it's awesome]]></title>
    <link href="http://josephbulger.com/blog/2011/10/18/gist-github-and-why-its-awesome/"/>
    <updated>2011-10-18T04:00:08-04:00</updated>
    <id>http://josephbulger.com/blog/2011/10/18/gist-github-and-why-its-awesome</id>
    <content type="html"><![CDATA[<p>In case you haven&rsquo;t noticed, a lot of my posts recently have been using <a href="https://gist.github.com/">gist</a>. It&rsquo;s an awesome tool that&rsquo;s freely available which allows you to write snippets of code in a variety of languages.</p>

<!-- more -->


<p>Not only does it do that, but the actual gist that you create is a full fledged Git repository, which means you have the ability to clone it , pull and push from it.</p>

<p>I also use a <a href="http://wordpress.org/extend/plugins/embed-github-gist/">plug in</a> for my blog that let&rsquo;s me show individual files on any of my gists.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mental Floss: The Month on the Calendar]]></title>
    <link href="http://josephbulger.com/blog/2011/10/17/mental-floss-the-month-on-the-calendar/"/>
    <updated>2011-10-17T04:00:02-04:00</updated>
    <id>http://josephbulger.com/blog/2011/10/17/mental-floss-the-month-on-the-calendar</id>
    <content type="html"><![CDATA[<p>So we&rsquo;ve seen what the Calendar looks like, and how it&rsquo;s building it&rsquo;s Months, but what goes into building a Month?</p>

<!-- more -->


<p>So building a Month is all about one thing: building it&rsquo;s weeks. The only other thing I need from a month is the ability to get it&rsquo;s name (i.e. January, February, etc.). My implementation of this looks something like this:</p>

<div><script src='https://gist.github.com/1291245.js?file=Month.cs'></script>
<noscript><pre><code>﻿public class Month
{
  private DateTime FirstDayOfMonth { get; set; }
  
  private IList&lt;Week&gt; Weeks { get; set; }

  public Month(int monthValue)
  {
      FirstDayOfMonth = new DateTime(DateTime.Now.Year, monthValue, 1);
      
      Weeks = new List&lt;Week&gt;();

      BuildMonth();
  }

  private void BuildMonth()
  {
      var startDay = Calendar.GetStartDay();

      var week = new Week();

      var day = FirstDayOfMonth;
      
      do
      {
          if (WeekHasEnded(day, startDay) &amp;&amp; WeekIsNotEmpty(week))
          {
              Weeks.Add(week);
              week = new Week();
          }

          week.Add(day);
          
          day = GetNextDay(day);

      } while (day.Month == FirstDayOfMonth.Month);

      Weeks.Add(week);
  }

  private bool WeekIsNotEmpty(Week week)
  {
      return week.GetDays().Count() &gt; 0;
  }

  private bool WeekHasEnded(DateTime day, DayOfWeek startDay)
  {
      return day.DayOfWeek == startDay;
  }

  private DateTime GetNextDay(DateTime day)
  {
      return day.AddDays(1);
  }

  public DayOfWeek GetFirstDayOfMonth()
  {
      return FirstDayOfMonth.DayOfWeek;
  }

  public IList&lt;Week&gt; GetWeeks()
  {
      return Weeks;
  }
  
  public string GetMonthName()
  {
      return string.Format(&quot;{0:MMMM}&quot;, FirstDayOfMonth);
  }
}</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mental Floss: The Calendar ViewModel]]></title>
    <link href="http://josephbulger.com/blog/2011/10/16/mental-floss-the-calendar-viewmodel/"/>
    <updated>2011-10-16T12:46:08-04:00</updated>
    <id>http://josephbulger.com/blog/2011/10/16/mental-floss-the-calendar-viewmodel</id>
    <content type="html"><![CDATA[<p>So my ViewModel basically starts with the idea of a Calendar and it&rsquo;s Events. So what did I end up making that look like? Let&rsquo;s disregard the markup for now, because how it looks isn&rsquo;t really what we&rsquo;re talking about here. What we&rsquo;re talking about is how the Calendar and it&rsquo;s Events are <em><strong>modeled</strong></em>.</p>

<!-- more -->


<p>So my Calendar looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Calendar</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="nf">Calendar</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Months</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">Month</span><span class="p">&gt;</span>
</span><span class='line'>        <span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span> <span class="n">IDictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">Month</span><span class="p">&gt;</span> <span class="n">Months</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="n">Month</span> <span class="nf">GetCurrentMonth</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">GetMonth</span><span class="p">(</span><span class="n">DateTime</span><span class="p">.</span><span class="n">Today</span><span class="p">.</span><span class="n">Month</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="n">Month</span> <span class="nf">GetNextMonth</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">GetMonth</span><span class="p">(</span><span class="n">DateTime</span><span class="p">.</span><span class="n">Today</span><span class="p">.</span><span class="n">Month</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="n">Month</span> <span class="nf">GetMonth</span><span class="p">(</span><span class="kt">string</span> <span class="n">month</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">GetMonth</span><span class="p">(</span>
</span><span class='line'>        <span class="n">DateTime</span><span class="p">.</span><span class="n">ParseExact</span><span class="p">(</span>
</span><span class='line'>          <span class="n">month</span><span class="p">,</span> <span class="s">&quot;MMMM&quot;</span><span class="p">,</span> <span class="n">CultureInfo</span><span class="p">.</span><span class="n">CurrentCulture</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Month</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="n">Month</span> <span class="nf">GetMonth</span><span class="p">(</span><span class="kt">int</span> <span class="n">monthValue</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(!</span><span class="n">Months</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="n">monthValue</span><span class="p">))</span>
</span><span class='line'>          <span class="n">Months</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">monthValue</span><span class="p">,</span> <span class="k">new</span> <span class="n">Month</span><span class="p">(</span><span class="n">monthValue</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">Months</span><span class="p">[</span><span class="n">monthValue</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="n">DayOfWeek</span> <span class="nf">GetStartDay</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">DayOfWeek</span><span class="p">.</span><span class="n">Monday</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="n">DayOfWeek</span> <span class="nf">GetLastDay</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">DayOfWeek</span><span class="p">.</span><span class="n">Sunday</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">void</span> <span class="nf">IncludeEvents</span><span class="p">(</span><span class="n">IList</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">&gt;</span> <span class="n">events</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">@event</span> <span class="k">in</span> <span class="n">events</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">IncludeEvent</span><span class="p">(</span><span class="n">@event</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">void</span> <span class="nf">IncludeEvent</span><span class="p">(</span><span class="n">Event</span> <span class="n">eventToInclude</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">allDaysQuery</span> <span class="p">=</span> <span class="k">from</span> <span class="n">week</span> <span class="k">in</span> <span class="n">GetMonth</span><span class="p">(</span>
</span><span class='line'>          <span class="n">eventToInclude</span><span class="p">.</span><span class="n">Day</span><span class="p">.</span><span class="n">Month</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">GetWeeks</span><span class="p">()</span>
</span><span class='line'>        <span class="k">from</span> <span class="n">day</span> <span class="k">in</span> <span class="n">week</span><span class="p">.</span><span class="n">GetDays</span><span class="p">()</span>
</span><span class='line'>        <span class="k">select</span> <span class="n">day</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">var</span> <span class="n">filteredDays</span> <span class="p">=</span> <span class="k">from</span> <span class="n">day</span> <span class="k">in</span> <span class="n">allDaysQuery</span>
</span><span class='line'>                         <span class="k">where</span> <span class="n">day</span><span class="p">.</span><span class="n">Date</span> <span class="p">==</span> <span class="n">eventToInclude</span><span class="p">.</span><span class="n">Day</span><span class="p">.</span><span class="n">Date</span>
</span><span class='line'>                         <span class="k">select</span> <span class="n">day</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">var</span> <span class="n">dayToAddEventTo</span> <span class="p">=</span> <span class="n">filteredDays</span><span class="p">.</span><span class="n">First</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">dayToAddEventTo</span><span class="p">.</span><span class="n">AddEvent</span><span class="p">(</span><span class="n">eventToInclude</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Calendar is really only concerned with one thing: showing events that belong to it. In order to accomplish this goal, the Calendar must be able to include events into the months on the Calendar.</p>

<p>In order to do this, the Calendar has to be able to build months, and then include the events into the days of those months. All of this logic takes place in the IncludeEvent method, which utilizes quite a few other classes to accomplish this.</p>

<p>In the next post, we&rsquo;ll take a look at the other classes we used in the ViewModel to accommodate our Calendar</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Team Maturity: Self-Organizing]]></title>
    <link href="http://josephbulger.com/blog/2011/10/14/team-maturity-self-organizing/"/>
    <updated>2011-10-14T04:00:24-04:00</updated>
    <id>http://josephbulger.com/blog/2011/10/14/team-maturity-self-organizing</id>
    <content type="html"><![CDATA[<p>Your team has been in the <a href="http://josephbulger.com/blog/2011/09/15/team-maturity-learning/">Learning stage</a> and it&rsquo;s heading into the Self-Organizing stage. Team members have learned the skills necessary to become self-organizing now, and everything gets done whether you&rsquo;re there or not. This is where a lot of people get scared. What good am I as a lead if I&rsquo;m not needed anymore? Couldn&rsquo;t my higher ups just fire me and let the team do it&rsquo;s thing?<!-- more --></p>

<p>Not to worry. In the Self-Organizing stage your role turns to more of a Coach. You need to <em>grow</em> your team into learning new things, technologies or tools to help them in what they do. Inspire them to be passionate about their job. This is also the perfect stage to take those team members that you identified earlier as your potential leaders and really coach them into<em><strong> becoming</strong></em> leaders. If you do your job well enough, then they can do your job <em>for</em> you. <strong>This is not a bad thing. </strong>If they can do your job for you, that frees you up to help with other projects, or start new ones.</p>

<p>In reality, a team will never be able to sustain being in the Self-Organizing stage, though. Teams will cycle through stages. Usually it&rsquo;s a circular pattern. It almost always happens because the scope of the project changes in some way. Maybe they need to learn a whole new technology stack. Maybe the project has taken a whole new direction and you need to develop completely new projects. If this happens don&rsquo;t think it&rsquo;s a sign that you or your team has done something wrong. It&rsquo;s just a natural part of the team cycle. It should be <em><strong>easier</strong></em> for subsequent cycles. The more your team has experience going through the cycles, and gain experience with how they work inside each cycle, the easier it will be to ramp back up to Self-Organizing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mental Floss: The problem with my Circle is...]]></title>
    <link href="http://josephbulger.com/blog/2011/10/13/mental-floss-the-problem-with-my-circle-is/"/>
    <updated>2011-10-13T04:00:32-04:00</updated>
    <id>http://josephbulger.com/blog/2011/10/13/mental-floss-the-problem-with-my-circle-is</id>
    <content type="html"><![CDATA[<p>that I&rsquo;m exposing too many details to the user of my code. The developer has to know intimate details about how to set up both the Ellipse and the Circle in order to calculate their areas effectively. In one case, the Ellipse, the runner has to know to set the major and minor axes, while for the Circle, they have know to set the Radius.</p>

<!-- more -->


<p>The underlying problem here is simple, actually. The real issue stems from the fact that the Ellipse (and by proxy the Circle) was designed as a Hybrid object. As I&rsquo;ve said before, and <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">others before me</a>, Hybrid objects are evil. To fix this, we need to either make these classes Data Structures, or make them Objects. Since the whole point of the code is to calculate the area, I say we have to make them Objects.</p>

<p>To do that, I made the following changes to Ellipse:</p>

<div><script src='https://gist.github.com/1279017.js?file=GoodEllipse.cs'></script>
<noscript><pre><code>public class Ellipse
{
  protected virtual int MajorAxis { get; set; }
  protected virtual int MinorAxis { get; set; }
    
  public Ellipse(int majorAxis, int minorAxis)
  {
    MajorAxis = majorAxis;
    MinorAxis = minorAxis;
  }
  
  public virtual double CalculateArea()
  {
    return Math.Pi * MajorAxis * MinorAxis;
  }
}</code></pre></noscript></div>


<p>Notice how MajorAxis and MinorAxis can still be extended via a subclass if need be, but they are <strong>only</strong> accessible from sub classes now, not from the outside world. This removes the class&rsquo;s Data Structure flavor and make it&rsquo;s a pure Object. It also has a great side benefit. Now a user can only create an Ellipse by supplying the major and minor values when the Ellipse is created. This logically makes sense because an Ellipse can&rsquo;t exist without it&rsquo;s major and minor axes.</p>

<p>So how does this effect the Circle now? This is how I changed the Circle:</p>

<div><script src='https://gist.github.com/1279017.js?file=GoodCircle.cs'></script>
<noscript><pre><code>public class Circle: Ellipse
{
  public Circle(int radius)
  {
    MajorAxis = radius;
    MinorAxis = radius;
  }  
}</code></pre></noscript></div>


<p>A lot of code has been removed. It almost seems like I&rsquo;ve cheated somewhere, doesn&rsquo;t it? Well, now that Ellipse is acting as a pure Object, the only thing Circle needs to do is to explain why it&rsquo;s &ldquo;special&rdquo;. As we noted before, a Circle is special because it has a Radius. In other words, it&rsquo;s major and minor axes have the same length. So the Circle class simply explains that relationship, and you&rsquo;re done. The area calculation doesn&rsquo;t need to be modified because the real difference was showing how the radius is related to the major and minor axes.</p>

<p>Now the runner is forced to use the classes in a way that prevents them from being used in inappropriate ways:</p>

<div><script src='https://gist.github.com/1279017.js?file=GoodRunner.cs'></script>
<noscript><pre><code>public class Runner
{
  public void UsingEllipsesAndCircles()
  {
    var ellipse = new Ellipse(10, 5);    
    
    var areaOfEllipse = ellipse.CalculateArea();
    
    var circle = new Circle(4);
        
    var areaForCircle = circle.CalculateArea();    
  }
}</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mental Floss: What's the problem with my Circle]]></title>
    <link href="http://josephbulger.com/blog/2011/10/12/mental-floss-whats-the-problem-with-my-circle/"/>
    <updated>2011-10-12T04:00:01-04:00</updated>
    <id>http://josephbulger.com/blog/2011/10/12/mental-floss-whats-the-problem-with-my-circle</id>
    <content type="html"><![CDATA[<p>I got into an interesting discussion about <a href="http://josephbulger.com/blog/2011/09/02/solid-principles-open-closed-principle/">SOLID </a>principles with a fellow developer today, and it got me to thinking about a common problem I&rsquo;ve seen come up and I wanted to try and touch on it.<!-- more --></p>

<p>So first things first, let&rsquo;s go over some math and set up the problem space.</p>

<p>You have an <a href="http://en.wikipedia.org/wiki/Ellipse">Ellipse</a>. You have a <a href="http://en.wikipedia.org/wiki/Circle">Circle</a>. A Circle is a special kind of Ellipse. Specifically, an Ellipse has a major axis and a minor axis, and a Circle is special because it&rsquo;s major and minor axis are equivalent in their length.</p>

<p>So when a developer initially goes to model these objects, you typically would see something like this:</p>

<div><script src='https://gist.github.com/1279017.js?file=BadEllipse.cs'></script>
<noscript><pre><code>public class Ellipse
{
  public virtual int MajorAxis { get; set; }
  public virtual int MinorAxis { get; set; }
    
  public virtual double CalculateArea()
  {
    return Math.Pi * MajorAxis * MinorAxis;
  }
}</code></pre></noscript></div>


<p>I see this implementation a lot. When asked how this supports SOLID principles, I get the following a lot of the time:</p>

<p>It supports <a href="http://josephbulger.com/blog/2011/09/02/solid-principles-open-closed-principle/">OCP </a>because I can override any of the properties or the methods. Ok good.</p>

<p>It supports <a href="http://josephbulger.com/blog/2011/09/16/solid-principles-single-responsibility-principle/">SRP </a>because the class is only responsible for knowing things about Ellipse. Ok good.</p>

<p>And there are some other ones, but then we veer into trying to extend this model with the special Circle, and that&rsquo;s where things really start to break down. I&rsquo;ve seen a lot of variations about how this goes down, but I&rsquo;m going to summarize all of them with this definition:</p>

<div><script src='https://gist.github.com/1279017.js?file=BadCircle.cs'></script>
<noscript><pre><code>public class Circle: Ellipse
{
  public int Radius { get; set; }
  
  public override double CalculateArea()
  {
    return Math.Pi * Radius * Radius
  }
}</code></pre></noscript></div>


<p>What happens here is a new property is introduced so that the users know that Circles are special because they have a Radius. Then when we calculate the Area, we override the function that calculates the area and we use the radius instead.</p>

<p>So someone would use it like this:</p>

<div><script src='https://gist.github.com/1279017.js?file=BadRunner.cs'></script>
<noscript><pre><code>public class Runner
{
  public void UsingEllipsesAndCircles()
  {
    var ellipse = new Ellipse();
    ellipse.MajorAxis = 10;
    ellipse.MinorAxis = 5;
    
    var areaOfEllipse = ellipse.CalculateArea();
    
    var circle = new Circle();
    circle.Radius = 4;
    
    var areaForCircle = circle.CalculateArea();    
  }
}</code></pre></noscript></div>


<p>So what&rsquo;s the problem with this? Think about it an tomorrow I&rsquo;ll post my proposed solution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mental Floss: Models and ViewModels, and yes they're different]]></title>
    <link href="http://josephbulger.com/blog/2011/10/11/mental-floss-models-and-viewmodels-and-yes-theyre-different/"/>
    <updated>2011-10-11T13:20:34-04:00</updated>
    <id>http://josephbulger.com/blog/2011/10/11/mental-floss-models-and-viewmodels-and-yes-theyre-different</id>
    <content type="html"><![CDATA[<p>My wife recently asked me to work on a site for our son&rsquo;s class and while working on it I realized that what I was building was a pretty great example of my thoughts on how I feel that Models and ViewModels relate to each other.</p>

<!-- more -->


<p>So before we get to any code I&rsquo;d first like to explain how I see the Model and ViewModel shaping conceptually. The domain is basically as follows:</p>

<p>The system needs to be able to allow users to sign up as Readers for a particular day. The time that they are going to read is always the same, it&rsquo;s 10 AM for an hour. The days that a user can sign up to be a Reader are specific. For the most part, the days are Monday, Tuesday, Thursday and Friday, but there are also some other rules like the week of Thanksgiving there won&rsquo;t be any readings. Currently, this is being done by the teacher where she prints out a Reading Calendar that has the days for reading highlighted. What needs to be done is basically the same thing. We need to make a calendar that shows everyone all the days that are eligible for signing up, and let them sign up for those days. It also needs to show them the days that have already been signed up, and show the Reader for that day.</p>

<p>Ok, so that&rsquo;s the basics. Now, the question here is how is the Model and ViewModel broken down?</p>

<p>To illustrate this it would probably be better to start with the user experience, and hence the ViewModel. So the user will be presented with a Calendar, and they should be able to see Events that show up on the calendar, like they&rsquo;re most likely already used to. These Events will show who&rsquo;s signed up. Now, the user also needs to be able to Sign Up. That&rsquo;s the extent of the first version of the ViewModel I came up with. We have a Calendar, Events, and a SignUp.</p>

<p>Now, onto the Model. When the user signs up, they&rsquo;re telling the system that they want to be a Reader for a particular day. Once they become a Reader then the system shouldn&rsquo;t allow anyone else sign up on that day. So that&rsquo;s really the Model. We have a bunch of Readers and some logic that keeps you from signing up multiple Readers on the same day.</p>

<p>So how does the Model and ViewModel relate? Well, there are two key relationships here. First, when a user signs up, we&rsquo;ll have to map the SignUp over to a Reader. Second, when we show the user a calendar, we need to get all the Readers for those days, and map the Readers over to Events which the Calendar knows how to show.</p>

<p>Notice the last thing I said there. The <strong>Calendar</strong> knows how to <em>show</em> <strong>Events</strong>, but it doesn&rsquo;t know<em><strong> anything</strong></em> about Readers. The implications here allow your system to be truly decoupled and makes it much more maintainable.</p>

<p>So how did I implement this? I&rsquo;ll show you on my next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOLID Principles: Single responsibility principle]]></title>
    <link href="http://josephbulger.com/blog/2011/09/16/solid-principles-single-responsibility-principle/"/>
    <updated>2011-09-16T14:00:33-04:00</updated>
    <id>http://josephbulger.com/blog/2011/09/16/solid-principles-single-responsibility-principle</id>
    <content type="html"><![CDATA[<p>I saved <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">Single Responsibility Principle </a>(SRP) for last. I think it&rsquo;s the most important principle to understand and to utilize correctly. I would even go so far as to say it&rsquo;s the most important principle to follow.</p>

<!-- more -->


<p>So why is SRP so important? I guess it&rsquo;s all in it&rsquo;s definition. A class or file should only have one reason to change. If it has more than one reason to change, then your code will become brittle and difficult to maintain. The problem with SRP is how difficult it is to follow. SRP feels a lot more like an art than a science at times. You get into situations where you&rsquo;re not sure whether or not a class is only doing one thing, and if you need to further abstract away code into separate classes.</p>

<p>As a simple example, let&rsquo;s say you have a Car that needs to be able to start it&rsquo;s Engine</p>

<div><script src='https://gist.github.com/1208417.js?file=BadCar.cs'></script>
<noscript><pre><code>public class Car
{
  public void Start()
  {
    Engine.StartPistons();
    Engine.InjectOxygen();
    Engine.InjectFuel();
  }
}</code></pre></noscript></div>


<p>This Car knows <em><strong>way</strong></em> too much about it&rsquo;s Engine. If the Engine&rsquo;s starting sequence ever needs to be changed, you have to actually go into the Car class to change it! That just doesn&rsquo;t make any sense. What we should be doing instead is abstracting away that functionality inside the Engine class and allowing the Car to simply start the Engine when it needs to.</p>

<div><script src='https://gist.github.com/1208417.js?file=Engine.cs'></script>
<noscript><pre><code>public class Engine
{
  public void Start()
  {
    StartPistons();
    InjectOxygen();
    InjectFuel();
  }
 
  private void StartPistons() { ... }
  private void InjectOxygen() { ... }
  private void InjectFuel() { ... }
}</code></pre></noscript></div>


<p>This Engine prevents other classes from using it improperly. Part of learning how to effectively use SRP is to identify when you&rsquo;re exposing too much of a class. In the previous Engine the Car was calling each function inside the Engine. This better designed Engine hides this functionality from outsiders, so the Car now has no choice but to use only the start method.</p>

<p>The Car now has to look something like this</p>

<div><script src='https://gist.github.com/1208417.js?file=GoodCar.cs'></script>
<noscript><pre><code>public class Car
{
  public void Start()
  {
    Engine.Start();
  }
}</code></pre></noscript></div>


<p>This is a class structure that utilizes SRP.</p>

<p>Want more info? <a href="http://www.dimecasts.net/Content/WatchEpisode/88">Check out this dime cast</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Team Maturity: Learning]]></title>
    <link href="http://josephbulger.com/blog/2011/09/15/team-maturity-learning/"/>
    <updated>2011-09-15T14:00:55-04:00</updated>
    <id>http://josephbulger.com/blog/2011/09/15/team-maturity-learning</id>
    <content type="html"><![CDATA[<p>So you&rsquo;re team now has time to learn, and some of them (if not all), are taking advantage of that. How do you get them to be self-organizing? That&rsquo;s where you start pushing responsibilities onto your team.</p>

<!-- more -->


<p>The problem with teams that are not self-organizing is that they don&rsquo;t have the skills <em><strong>to be</strong></em> self-organizing. Your job is to identify what skills are lacking, and give them the opportunities to grow those skills.</p>

<p>This usually involves a couple of different areas. Your team won&rsquo;t need help in technical areas, mostly, because they focus on that themselves. There are exceptions, but to get them to self-organizing, you want them to focus on other areas too.</p>

<p>When a team member comes to you with a problem, don&rsquo;t solve it for them. Give them the tools they need to solve it for themselves. Let them grow. They may hate you for it at first, but in the end it will be very rewarding for them, and the good ones will recognize and appreciate what you&rsquo;ve done for them.</p>

<p>Find your leaders. They will be the ones who will lead when you get to self-organizing. Give them the tools they need to learn how to do your job. No, they&rsquo;re not going to replace you, and you won&rsquo;t lose your job. If you can grow one leader to do your job so well that they <em><strong>can</strong></em> replace you, and a team to be self-organizing, then you&rsquo;ve just shown that you have the ability to grow teams. Any company will see that and capitalize on your abilities to produce good teams.</p>

<p>When your in the chaos stage, you spend a lot of time putting up barriers between your team and the outside world. This is to protect them so you can give them room to learn and grow. You&rsquo;re not in chaos anymore, though, and it&rsquo;s time to start taking down some of those barriers. Your team needs to grow in the areas that are <em><strong>outside</strong></em> of the barriers you put up. Lower your barriers, and let your team learn to handle what&rsquo;s in the outside world. Clients, business analysts, project managers, etc. They need to learn how to deal with different actors, people besides QA and their team lead.</p>

<p>Eventually they&rsquo;ll grow to the final stage, Self-Organizing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOLID Principles: Dependency inversion principle]]></title>
    <link href="http://josephbulger.com/blog/2011/09/14/solid-principles-dependency-inversion-principle/"/>
    <updated>2011-09-14T14:00:18-04:00</updated>
    <id>http://josephbulger.com/blog/2011/09/14/solid-principles-dependency-inversion-principle</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Dependency_inversion_principle">Dependency Inversion Principle</a> has a dramatic effect on your code base. It has the potential to decouple your code in ways that you never would have thought possible before. Using a good IoC container can make all the difference as well.</p>

<!-- more -->


<p>The best way to explain this principle would probably be an example.
Let&rsquo;s say you have a car like this</p>

<div><script src='https://gist.github.com/1208366.js?file=CoupledCar.cs'></script>
<noscript><pre><code>public class Car
{
    public Car()
    {
        Engine = new FourCylinderEngine();
    }    
    
    private FourCylinderEngine Engine { get; set; }
    
    public void Start()
    {
        Engine.Start();        
    }
}</code></pre></noscript></div>


<p>Notice the engine that belongs to the car. First of all, the car is actually creating the engine. This means that the car is tightly coupled to the engine it&rsquo;s creating. Secondly, this creates a concrete coupling on the car to a specific kind of engine, the FourCylinderEngine.</p>

<p>A better solution would be to use Dependency Inversion. You should depend on an interface instead of a concrete class. Back in our example, our FoudCyclinderEngine looks like this</p>

<div><script src='https://gist.github.com/1208366.js?file=FourCylinderEngine.cs'></script>
<noscript><pre><code>public class FourCylinderEngine : Engine
{
    public void Start()
    {
        StartRotatingPistonsOneAndThreeAtPhase(0.Degrees);
        StartRotatingPistonsTwoAndFourAtPhase(90.Degrees);
    }
}</code></pre></noscript></div>


<p>Notice how it implements Engine. That&rsquo;s the interface our Car should be using. There&rsquo;s one additional problem, though. Right now the Car is creating it&rsquo;s Engine, but you can&rsquo;t instantiate an interface, so what do you do? That&rsquo;s the key to Dependency Inversion. You&rsquo;re saying,</p>

<blockquote><p>a Car does not depend on knowing about how to create an Engine</p></blockquote>

<p>It just <em>uses</em> it. So the new Car class looks like this</p>

<div><script src='https://gist.github.com/1208366.js?file=DecoupledCar.cs'></script>
<noscript><pre><code>public class Car
{
    public Car(Engine engine)
    {
        Engine = engine;
    }    

    private Engine Engine { get; set; }

    public void Start()
    {
        Engine.Start();        
    }
}</code></pre></noscript></div>


<p>So how does the engine get created? Obviously something is passing in the engine to the Car, but what? You need a new class. Maybe a CarManufacturer or something, which is responsible for manufacturing cars. Part of that responsibility would be putting an engine in a car.</p>

<p>Want more info? <a href="http://www.dimecasts.net/Content/WatchEpisode/96">Check out this dime cast</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Team Maturity: Chaos]]></title>
    <link href="http://josephbulger.com/blog/2011/09/13/team-maturity-chaos/"/>
    <updated>2011-09-13T14:00:10-04:00</updated>
    <id>http://josephbulger.com/blog/2011/09/13/team-maturity-chaos</id>
    <content type="html"><![CDATA[<p>So how do you know if your team is in choas? Actually, most teams are in the chaos stage. Learning to identify when a team has gotten into chaos isn&rsquo;t really that hard if you follow some simple guidelines, though.</p>

<!-- more -->


<p>Ask yourself a simple question.</p>

<blockquote><p>Does my team have enough time to learn new things?</p></blockquote>

<p>If the answer is no, then you&rsquo;re in chaos. I&rsquo;ll go one step further. If the answer was &ldquo;no, why does my team need to learn anything?&rdquo;, then you&rsquo;re in chaos, and if you want to fix it you need to look at yourself.</p>

<p>All teams need time to learn. This is important so that they can become more productive, and to move towards being self-organizing. If they can&rsquo;t learn then they&rsquo;ll never get the self-organizing stage.</p>

<p>If you&rsquo;re with me so far, then you&rsquo;re probably asking</p>

<blockquote><p>How do I make time for my team to learn?</p></blockquote>

<p>It starts by identifying why you&rsquo;re team doesn&rsquo;t have time. Sometimes it can be as simple as giving them some extra time in the week to learn something new. Tell your team they can have 4 hours on Friday to learn whatever they want. This will let you see which people on your team are self-motivated. This is vitally important. It identifies your <strong><em>leaders</em></strong>. For those who choose not to learn anything, make it a requirement. The best way to go about doing this is to just ask people how they&rsquo;re learning is going. Maybe every Monday you ask each team member individually what thing they learned on Friday. This is great because it sets up an expectation for them that they not only have the opportunity to learn, but that you&rsquo;re <em><strong>expecting</strong></em> them to learn.</p>

<p>Not all teams will have time for this. Your release cycle swamps you with work, for various reasons, and prevents you from being able to give this critical time to your team. So what then? That&rsquo;s when you&rsquo;re role become a fire fighter of sorts. You have to put out the fires. The point here, though, is to extinguish the fire, permanently. If you&rsquo;re putting out one fire, and two fires pop up in it&rsquo;s place, then you have another issue which needs to be addressed. You&rsquo;re the team leader, and it&rsquo;s your job to control the fire. You have to shield your team, that&rsquo;s your job during this stage. That means putting out fires, but it also means <em><strong>not allowing other fires to start in the first place</strong></em>.</p>

<p>This is usually a good indication that you&rsquo;re lacking tools that help your team be more productive. For example, maybe your &ldquo;fire&rdquo; is releases. They take too long to do, because they&rsquo;re manual. You release often, so it&rsquo;s something you spend a lot of time on. Why isn&rsquo;t your release process automated? Take a step back, is your build process automated? No? That&rsquo;s the beginning of your problem. You can&rsquo;t have an automated release process if you don&rsquo;t have an automated build process. Another example, is it hard for your team to share projects? Do you find yourself in situations where two people are working on the same thing and stepping on each other&rsquo;s toes a lot? Does this require you to put people on separate projects so you don&rsquo;t get into a tangled web of conflicts? Yes?</p>

<p>Are you using source control?</p>

<p>No? Get it.</p>

<p>Yes? Are you using a <em><strong>good</strong></em> source control system? Your team needs to be able to work together, and if your source control doesn&rsquo;t accommodate that it&rsquo;s probably because it&rsquo;s not so great. Try a new one. Maybe Git, or Mercurial, or if you&rsquo;re not into <a href="http://en.wikipedia.org/wiki/Distributed_revision_control">DVCS</a>, try SVN.</p>

<p>There are a lot of things that can hinder your team&rsquo;s productivity. Most of them have been solved by other teams already using automation. You&rsquo;re team probably isn&rsquo;t special, and their problems have probably been solved by other (bigger and more productive) teams. See what they&rsquo;ve done. Copy them, mimic them, learn from them.</p>

<p>Get your team out of chaos, so they can learn, and make your job easier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOLID Principles: Interface segregation principle]]></title>
    <link href="http://josephbulger.com/blog/2011/09/12/solid-principles-interface-segregation-principle/"/>
    <updated>2011-09-12T08:00:26-04:00</updated>
    <id>http://josephbulger.com/blog/2011/09/12/solid-principles-interface-segregation-principle</id>
    <content type="html"><![CDATA[<p>Interface Segregation Principle (ISP), focuses on the idea that it&rsquo;s better to have many small specific interfaces that define one concept, then to have one big contract that encompasses many concepts in one.</p>

<!-- more -->


<p>I think a prime example of an interface that violates this principle would be <a href="http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx">MembershipProvider </a>class which is commonly used in ASP.NET applications. Granted, this isn&rsquo;t technically an interface (it&rsquo;s actually an abstract class), but it demonstrates the principle perfectly. If you&rsquo;ve ever tried to make your own custom membership provider, and you&rsquo;ve had to implement this beast, you already know the pain involved. There are a ridiculous number of methods involved with this class. There are so many, actually, that the best practice inside many .NET circles has been to simply throw a NotImplementedException for any methods you don&rsquo;t want to spend the time implementing.</p>

<p>The solution would be to actually break up this abstract class into many smaller classes, so the developer could extend the parts that needs to be customized, and leave the rest alone.</p>

<p>Want more info? <a href="http://www.dimecasts.net/Content/WatchEpisode/94">Check out this dime cast</a>.</p>
]]></content>
  </entry>
  
</feed>
