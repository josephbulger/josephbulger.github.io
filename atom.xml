<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Joseph Bulger]]></title>
  <link href="http://josephbulger.github.io/atom.xml" rel="self"/>
  <link href="http://josephbulger.github.io/"/>
  <updated>2014-02-08T14:56:12-05:00</updated>
  <id>http://josephbulger.github.io/</id>
  <author>
    <name><![CDATA[Joseph Bulger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The New Build]]></title>
    <link href="http://josephbulger.github.io/blog/2013/05/27/the-new-build/"/>
    <updated>2013-05-27T06:20:00-04:00</updated>
    <id>http://josephbulger.github.io/blog/2013/05/27/the-new-build</id>
    <content type="html"><![CDATA[<p>I just recently built a new computer. I decided to go middle of the road on this one, and build something that I anticipate will last me around 2 to 3 years. So far I am completely <strong>loving</strong> this build.</p>

<p>Let&rsquo;s get into the nuts and bolts. <!-- more --></p>

<h3>The Case</h3>

<p>First things first, what is this new build going to sit inside of. This go around I decided to get a Cooler Master HAF X case. Specifically <a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16811119225">this one</a>.</p>

<h3>AMD Build</h3>

<p>I went with an AMD build for a couple of reasons. First and foremost, because AMD recently received a set of processors that go up to 8 core, and are prepackaged overclocked, all for around $200. Getting an Intel 8 core is guaranteed to run you more than that. Price is a major factor here. I know that each AMD core is not nearly as powerful as an Intel core, but I&rsquo;m banking on the idea that it&rsquo;s powerful enough for what I&rsquo;m trying to accomplish, and that running a multi-core architecture is more in line with how I use my computer. The processor I ended up choosing was a <a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16819113284">FX-8350 Vishera</a>.</p>

<h3>Board</h3>

<p>I got an <a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16813131969">ASUS SABERTOOTH 990FX/GEN3</a>. Key factors on this one was the fact that it runs the Vishera smoothly. The fact that it has PCI-E 3 lanes was an added bonus, even if it&rsquo;s not <strong>true</strong> PCI-E 3 because it&rsquo;s stealing the lanes from the other slots. That&rsquo;s fine for me because I&rsquo;m only going to use 2 slots on those lanes anyway.</p>

<h3>Graphics</h3>

<p>I have two cross fired <a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16814150605">Radeon HD 7870</a>. They are un.. fricking&hellip; believable. These two things crossfired together make all the games I currently own <strong>scream</strong>. They should keep me entertained for a really long time.</p>

<h3>RAM</h3>

<p>I went with 32 GB of <a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16820231610">GSkill RAM</a>. Timings on them were 9-9-9-24. An interesting thing about the RAM. When I first booted my computer, the RAM LED was giving me errors on boot. Turns out that I didn&rsquo;t put the RAM all the way into the slot because the motherboard had only one latch on each slot (on the top) and not on the on the bottom. I had to put each RAM into the slot at the bottom first, then put it in the top, put the latch down, and then go back to the bottom and push it back on the bottom again.</p>

<h3>Hard Drives</h3>

<p>Only other things of note I think is how I set up my hard drives.</p>

<p>I have a <a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16820147193">256 GB SSD</a> boot drive. On top of that I have a <a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16822136555">VelociRaptor drive</a> for all my programs. I followed all of that up with 2 <a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16822148844">3 TB drives</a> in a RAID 1 configuration. I set up the RAID via hardware controllers through BIOS. Only tricky thing about that was I had to install windows on the SSD with the RAID drivers loaded so I could boot the SSD via RAID setup even though it wasn&rsquo;t configured for it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The New Blog]]></title>
    <link href="http://josephbulger.github.io/blog/2012/10/08/the-new-blog/"/>
    <updated>2012-10-08T11:22:40-04:00</updated>
    <id>http://josephbulger.github.io/blog/2012/10/08/the-new-blog</id>
    <content type="html"><![CDATA[<p>So I&rsquo;ve created a new blog. It&rsquo;s built using <a href="http://nodejs.org">nodejs</a> and so far I&rsquo;m really liking it.</p>

<!-- more -->


<p>The part that I&rsquo;m really digging is that I build my articles now using markdown files, so I can write up a markdown file from basically anywhere, then upload it and voila, instantly on my blog.</p>

<p>It&rsquo;s also really nice to be able to modify my blog as I see fit right down to the metal.</p>

<p>And on top of all that, it&rsquo;s also a <strong>lot</strong> faster than my other blog, which was on PHP using wordpress.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Kit on a MBP]]></title>
    <link href="http://josephbulger.github.io/blog/2012/10/08/installing-kit-on-a-mbp/"/>
    <updated>2012-10-08T11:22:40-04:00</updated>
    <id>http://josephbulger.github.io/blog/2012/10/08/installing-kit-on-a-mbp</id>
    <content type="html"><![CDATA[<p><a href="http://www.moncefbelyamani.com/how-to-install-xcode-homebrew-git-rvm-ruby-on-mac/">This article</a> was invaluable to me when I was confronted with the task of installing a slew of development tools on my new MacBook Pro.</p>

<!-- more -->


<p>This runs you threw installing the following items:</p>

<ul>
<li><p>Xcode</p></li>
<li><p>Homebrew</p></li>
<li><p>Git</p></li>
<li><p>RVM</p></li>
<li><p>Ruby 1.9.3</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gist @ GitHub and why it's awesome]]></title>
    <link href="http://josephbulger.github.io/blog/2011/10/18/gist-github-and-why-its-awesome/"/>
    <updated>2011-10-18T04:00:08-04:00</updated>
    <id>http://josephbulger.github.io/blog/2011/10/18/gist-github-and-why-its-awesome</id>
    <content type="html"><![CDATA[<p>In case you haven&rsquo;t noticed, a lot of my posts recently have been using <a href="https://gist.github.com/">gist</a>. It&rsquo;s an awesome tool that&rsquo;s freely available which allows you to write snippets of code in a variety of languages.</p>

<!-- more -->


<p>Not only does it do that, but the actual gist that you create is a full fledged Git repository, which means you have the ability to clone it , pull and push from it.</p>

<p>I also use a <a href="http://wordpress.org/extend/plugins/embed-github-gist/">plug in</a> for my blog that let&rsquo;s me show individual files on any of my gists.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Team Maturity: Self-Organizing]]></title>
    <link href="http://josephbulger.github.io/blog/2011/10/14/team-maturity-self-organizing/"/>
    <updated>2011-10-14T04:00:24-04:00</updated>
    <id>http://josephbulger.github.io/blog/2011/10/14/team-maturity-self-organizing</id>
    <content type="html"><![CDATA[<p>Your team has been in the <a href="http://josephbulger.github.io/blog/2011/09/15/team-maturity-learning/">Learning stage</a> and it&rsquo;s heading into the Self-Organizing stage. Team members have learned the skills necessary to become self-organizing now, and everything gets done whether you&rsquo;re there or not. This is where a lot of people get scared. What good am I as a lead if I&rsquo;m not needed anymore? Couldn&rsquo;t my higher ups just fire me and let the team do it&rsquo;s thing?<!-- more --></p>

<p>Not to worry. In the Self-Organizing stage your role turns to more of a Coach. You need to <em>grow</em> your team into learning new things, technologies or tools to help them in what they do. Inspire them to be passionate about their job. This is also the perfect stage to take those team members that you identified earlier as your potential leaders and really coach them into<em><strong> becoming</strong></em> leaders. If you do your job well enough, then they can do your job <em>for</em> you. <strong>This is not a bad thing. </strong>If they can do your job for you, that frees you up to help with other projects, or start new ones.</p>

<p>In reality, a team will never be able to sustain being in the Self-Organizing stage, though. Teams will cycle through stages. Usually it&rsquo;s a circular pattern. It almost always happens because the scope of the project changes in some way. Maybe they need to learn a whole new technology stack. Maybe the project has taken a whole new direction and you need to develop completely new projects. If this happens don&rsquo;t think it&rsquo;s a sign that you or your team has done something wrong. It&rsquo;s just a natural part of the team cycle. It should be <em><strong>easier</strong></em> for subsequent cycles. The more your team has experience going through the cycles, and gain experience with how they work inside each cycle, the easier it will be to ramp back up to Self-Organizing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOLID Principles: Single responsibility principle]]></title>
    <link href="http://josephbulger.github.io/blog/2011/09/16/solid-principles-single-responsibility-principle/"/>
    <updated>2011-09-16T14:00:33-04:00</updated>
    <id>http://josephbulger.github.io/blog/2011/09/16/solid-principles-single-responsibility-principle</id>
    <content type="html"><![CDATA[<p>I saved <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">Single Responsibility Principle </a>(SRP) for last. I think it&rsquo;s the most important principle to understand and to utilize correctly. I would even go so far as to say it&rsquo;s the most important principle to follow.</p>

<!-- more -->


<p>So why is SRP so important? I guess it&rsquo;s all in it&rsquo;s definition. A class or file should only have one reason to change. If it has more than one reason to change, then your code will become brittle and difficult to maintain. The problem with SRP is how difficult it is to follow. SRP feels a lot more like an art than a science at times. You get into situations where you&rsquo;re not sure whether or not a class is only doing one thing, and if you need to further abstract away code into separate classes.</p>

<p>As a simple example, let&rsquo;s say you have a Car that needs to be able to start it&rsquo;s Engine</p>

<div><script src='https://gist.github.com/1208417.js?file=BadCar.cs'></script>
<noscript><pre><code>public class Car
{
  public void Start()
  {
    Engine.StartPistons();
    Engine.InjectOxygen();
    Engine.InjectFuel();
  }
}</code></pre></noscript></div>


<p>This Car knows <em><strong>way</strong></em> too much about it&rsquo;s Engine. If the Engine&rsquo;s starting sequence ever needs to be changed, you have to actually go into the Car class to change it! That just doesn&rsquo;t make any sense. What we should be doing instead is abstracting away that functionality inside the Engine class and allowing the Car to simply start the Engine when it needs to.</p>

<div><script src='https://gist.github.com/1208417.js?file=Engine.cs'></script>
<noscript><pre><code>public class Engine
{
  public void Start()
  {
    StartPistons();
    InjectOxygen();
    InjectFuel();
  }
 
  private void StartPistons() { ... }
  private void InjectOxygen() { ... }
  private void InjectFuel() { ... }
}</code></pre></noscript></div>


<p>This Engine prevents other classes from using it improperly. Part of learning how to effectively use SRP is to identify when you&rsquo;re exposing too much of a class. In the previous Engine the Car was calling each function inside the Engine. This better designed Engine hides this functionality from outsiders, so the Car now has no choice but to use only the start method.</p>

<p>The Car now has to look something like this</p>

<div><script src='https://gist.github.com/1208417.js?file=GoodCar.cs'></script>
<noscript><pre><code>public class Car
{
  public void Start()
  {
    Engine.Start();
  }
}</code></pre></noscript></div>


<p>This is a class structure that utilizes SRP.</p>

<p>Want more info? <a href="http://www.dimecasts.net/Content/WatchEpisode/88">Check out this dime cast</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Team Maturity: Learning]]></title>
    <link href="http://josephbulger.github.io/blog/2011/09/15/team-maturity-learning/"/>
    <updated>2011-09-15T14:00:55-04:00</updated>
    <id>http://josephbulger.github.io/blog/2011/09/15/team-maturity-learning</id>
    <content type="html"><![CDATA[<p>So you&rsquo;re team now has time to learn, and some of them (if not all), are taking advantage of that. How do you get them to be self-organizing? That&rsquo;s where you start pushing responsibilities onto your team.</p>

<!-- more -->


<p>The problem with teams that are not self-organizing is that they don&rsquo;t have the skills <em><strong>to be</strong></em> self-organizing. Your job is to identify what skills are lacking, and give them the opportunities to grow those skills.</p>

<p>This usually involves a couple of different areas. Your team won&rsquo;t need help in technical areas, mostly, because they focus on that themselves. There are exceptions, but to get them to self-organizing, you want them to focus on other areas too.</p>

<p>When a team member comes to you with a problem, don&rsquo;t solve it for them. Give them the tools they need to solve it for themselves. Let them grow. They may hate you for it at first, but in the end it will be very rewarding for them, and the good ones will recognize and appreciate what you&rsquo;ve done for them.</p>

<p>Find your leaders. They will be the ones who will lead when you get to self-organizing. Give them the tools they need to learn how to do your job. No, they&rsquo;re not going to replace you, and you won&rsquo;t lose your job. If you can grow one leader to do your job so well that they <em><strong>can</strong></em> replace you, and a team to be self-organizing, then you&rsquo;ve just shown that you have the ability to grow teams. Any company will see that and capitalize on your abilities to produce good teams.</p>

<p>When your in the chaos stage, you spend a lot of time putting up barriers between your team and the outside world. This is to protect them so you can give them room to learn and grow. You&rsquo;re not in chaos anymore, though, and it&rsquo;s time to start taking down some of those barriers. Your team needs to grow in the areas that are <em><strong>outside</strong></em> of the barriers you put up. Lower your barriers, and let your team learn to handle what&rsquo;s in the outside world. Clients, business analysts, project managers, etc. They need to learn how to deal with different actors, people besides QA and their team lead.</p>

<p>Eventually they&rsquo;ll grow to the final stage, Self-Organizing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOLID Principles: Dependency inversion principle]]></title>
    <link href="http://josephbulger.github.io/blog/2011/09/14/solid-principles-dependency-inversion-principle/"/>
    <updated>2011-09-14T14:00:18-04:00</updated>
    <id>http://josephbulger.github.io/blog/2011/09/14/solid-principles-dependency-inversion-principle</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Dependency_inversion_principle">Dependency Inversion Principle</a> has a dramatic effect on your code base. It has the potential to decouple your code in ways that you never would have thought possible before. Using a good IoC container can make all the difference as well.</p>

<!-- more -->


<p>The best way to explain this principle would probably be an example.
Let&rsquo;s say you have a car like this</p>

<div><script src='https://gist.github.com/1208366.js?file=CoupledCar.cs'></script>
<noscript><pre><code>public class Car
{
    public Car()
    {
        Engine = new FourCylinderEngine();
    }    
    
    private FourCylinderEngine Engine { get; set; }
    
    public void Start()
    {
        Engine.Start();        
    }
}</code></pre></noscript></div>


<p>Notice the engine that belongs to the car. First of all, the car is actually creating the engine. This means that the car is tightly coupled to the engine it&rsquo;s creating. Secondly, this creates a concrete coupling on the car to a specific kind of engine, the FourCylinderEngine.</p>

<p>A better solution would be to use Dependency Inversion. You should depend on an interface instead of a concrete class. Back in our example, our FoudCyclinderEngine looks like this</p>

<div><script src='https://gist.github.com/1208366.js?file=FourCylinderEngine.cs'></script>
<noscript><pre><code>public class FourCylinderEngine : Engine
{
    public void Start()
    {
        StartRotatingPistonsOneAndThreeAtPhase(0.Degrees);
        StartRotatingPistonsTwoAndFourAtPhase(90.Degrees);
    }
}</code></pre></noscript></div>


<p>Notice how it implements Engine. That&rsquo;s the interface our Car should be using. There&rsquo;s one additional problem, though. Right now the Car is creating it&rsquo;s Engine, but you can&rsquo;t instantiate an interface, so what do you do? That&rsquo;s the key to Dependency Inversion. You&rsquo;re saying,</p>

<blockquote><p>a Car does not depend on knowing about how to create an Engine</p></blockquote>

<p>It just <em>uses</em> it. So the new Car class looks like this</p>

<div><script src='https://gist.github.com/1208366.js?file=DecoupledCar.cs'></script>
<noscript><pre><code>public class Car
{
    public Car(Engine engine)
    {
        Engine = engine;
    }    

    private Engine Engine { get; set; }

    public void Start()
    {
        Engine.Start();        
    }
}</code></pre></noscript></div>


<p>So how does the engine get created? Obviously something is passing in the engine to the Car, but what? You need a new class. Maybe a CarManufacturer or something, which is responsible for manufacturing cars. Part of that responsibility would be putting an engine in a car.</p>

<p>Want more info? <a href="http://www.dimecasts.net/Content/WatchEpisode/96">Check out this dime cast</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Team Maturity: Chaos]]></title>
    <link href="http://josephbulger.github.io/blog/2011/09/13/team-maturity-chaos/"/>
    <updated>2011-09-13T14:00:10-04:00</updated>
    <id>http://josephbulger.github.io/blog/2011/09/13/team-maturity-chaos</id>
    <content type="html"><![CDATA[<p>So how do you know if your team is in choas? Actually, most teams are in the chaos stage. Learning to identify when a team has gotten into chaos isn&rsquo;t really that hard if you follow some simple guidelines, though.</p>

<!-- more -->


<p>Ask yourself a simple question.</p>

<blockquote><p>Does my team have enough time to learn new things?</p></blockquote>

<p>If the answer is no, then you&rsquo;re in chaos. I&rsquo;ll go one step further. If the answer was &ldquo;no, why does my team need to learn anything?&rdquo;, then you&rsquo;re in chaos, and if you want to fix it you need to look at yourself.</p>

<p>All teams need time to learn. This is important so that they can become more productive, and to move towards being self-organizing. If they can&rsquo;t learn then they&rsquo;ll never get the self-organizing stage.</p>

<p>If you&rsquo;re with me so far, then you&rsquo;re probably asking</p>

<blockquote><p>How do I make time for my team to learn?</p></blockquote>

<p>It starts by identifying why you&rsquo;re team doesn&rsquo;t have time. Sometimes it can be as simple as giving them some extra time in the week to learn something new. Tell your team they can have 4 hours on Friday to learn whatever they want. This will let you see which people on your team are self-motivated. This is vitally important. It identifies your <strong><em>leaders</em></strong>. For those who choose not to learn anything, make it a requirement. The best way to go about doing this is to just ask people how they&rsquo;re learning is going. Maybe every Monday you ask each team member individually what thing they learned on Friday. This is great because it sets up an expectation for them that they not only have the opportunity to learn, but that you&rsquo;re <em><strong>expecting</strong></em> them to learn.</p>

<p>Not all teams will have time for this. Your release cycle swamps you with work, for various reasons, and prevents you from being able to give this critical time to your team. So what then? That&rsquo;s when you&rsquo;re role become a fire fighter of sorts. You have to put out the fires. The point here, though, is to extinguish the fire, permanently. If you&rsquo;re putting out one fire, and two fires pop up in it&rsquo;s place, then you have another issue which needs to be addressed. You&rsquo;re the team leader, and it&rsquo;s your job to control the fire. You have to shield your team, that&rsquo;s your job during this stage. That means putting out fires, but it also means <em><strong>not allowing other fires to start in the first place</strong></em>.</p>

<p>This is usually a good indication that you&rsquo;re lacking tools that help your team be more productive. For example, maybe your &ldquo;fire&rdquo; is releases. They take too long to do, because they&rsquo;re manual. You release often, so it&rsquo;s something you spend a lot of time on. Why isn&rsquo;t your release process automated? Take a step back, is your build process automated? No? That&rsquo;s the beginning of your problem. You can&rsquo;t have an automated release process if you don&rsquo;t have an automated build process. Another example, is it hard for your team to share projects? Do you find yourself in situations where two people are working on the same thing and stepping on each other&rsquo;s toes a lot? Does this require you to put people on separate projects so you don&rsquo;t get into a tangled web of conflicts? Yes?</p>

<p>Are you using source control?</p>

<p>No? Get it.</p>

<p>Yes? Are you using a <em><strong>good</strong></em> source control system? Your team needs to be able to work together, and if your source control doesn&rsquo;t accommodate that it&rsquo;s probably because it&rsquo;s not so great. Try a new one. Maybe Git, or Mercurial, or if you&rsquo;re not into <a href="http://en.wikipedia.org/wiki/Distributed_revision_control">DVCS</a>, try SVN.</p>

<p>There are a lot of things that can hinder your team&rsquo;s productivity. Most of them have been solved by other teams already using automation. You&rsquo;re team probably isn&rsquo;t special, and their problems have probably been solved by other (bigger and more productive) teams. See what they&rsquo;ve done. Copy them, mimic them, learn from them.</p>

<p>Get your team out of chaos, so they can learn, and make your job easier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOLID Principles: Interface segregation principle]]></title>
    <link href="http://josephbulger.github.io/blog/2011/09/12/solid-principles-interface-segregation-principle/"/>
    <updated>2011-09-12T08:00:26-04:00</updated>
    <id>http://josephbulger.github.io/blog/2011/09/12/solid-principles-interface-segregation-principle</id>
    <content type="html"><![CDATA[<p>Interface Segregation Principle (ISP), focuses on the idea that it&rsquo;s better to have many small specific interfaces that define one concept, then to have one big contract that encompasses many concepts in one.</p>

<!-- more -->


<p>I think a prime example of an interface that violates this principle would be <a href="http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx">MembershipProvider </a>class which is commonly used in ASP.NET applications. Granted, this isn&rsquo;t technically an interface (it&rsquo;s actually an abstract class), but it demonstrates the principle perfectly. If you&rsquo;ve ever tried to make your own custom membership provider, and you&rsquo;ve had to implement this beast, you already know the pain involved. There are a ridiculous number of methods involved with this class. There are so many, actually, that the best practice inside many .NET circles has been to simply throw a NotImplementedException for any methods you don&rsquo;t want to spend the time implementing.</p>

<p>The solution would be to actually break up this abstract class into many smaller classes, so the developer could extend the parts that needs to be customized, and leave the rest alone.</p>

<p>Want more info? <a href="http://www.dimecasts.net/Content/WatchEpisode/94">Check out this dime cast</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Datastructures, Objects, and why Hybrids are evil]]></title>
    <link href="http://josephbulger.github.io/blog/2011/09/10/datastructures-objects-and-why-hybrids-are-evil/"/>
    <updated>2011-09-10T08:31:50-04:00</updated>
    <id>http://josephbulger.github.io/blog/2011/09/10/datastructures-objects-and-why-hybrids-are-evil</id>
    <content type="html"><![CDATA[<p>I was writing this code that let&rsquo;s interviewees code problems for me, and it verifies that the interviewee actually writes something that works. I got to a point in my printer classes that I wasn&rsquo;t liking, and I thought I&rsquo;d share it.</p>

<!-- more -->


<p>I have a printer that allows the candidate to print something, which actually verifies that they&rsquo;re code up to that point is correct. It looks something like this</p>

<div><script src='https://gist.github.com/1208486.js?file=Hybrid.cs'></script>
<noscript><pre><code>public class Console
{
  public int Counter { get; set; }

  public void Print(string message)
  {
    CheckThatMessageIsCorrectForInterviewQuestion();
    Counter++;
  }
}
    </code></pre></noscript></div>


<p>It works exactly as I expected it to, but there was something I didn&rsquo;t like about it. I didn&rsquo;t like the Counter. I didn&rsquo;t want the candidates messing with it. My first inclination was to change the setter to private, but it got me to thinking.</p>

<p>The Console was definitely intended to be an Object. The whole point was to let the candidate use the Print method. What I had done, however, was create a Hybrid. It&rsquo;s a Hybrid because having the Counter property also makes Console a Data Structure. That&rsquo;s why I wasn&rsquo;t liking it. To the outside world, this class was a Hybrid, and I wanted it to be an Object. I needed my testing framework to know what the Counter was to test that the candidate had actually called Print enough times, though. So how do I fix it? Another problem was that even if I made Counter with a private setter, it would still look like a Data Structure. You might argue that a property is just a fancy kind of method, but it still <em><strong>feels</strong></em> like a Data Structure.</p>

<p>Ultimately, I decided on this</p>

<div><script src='https://gist.github.com/1208486.js?file=Object.cs'></script>
<noscript><pre><code>public class Console
{
  private int Counter { get; set; }

  public void Print(string message)
  {
    CheckThatMessageIsCorrectForInterviewQuestion();
    Counter++;
  }

  public int GetCount()
  {
    return Counter;
  }
}
    </code></pre></noscript></div>


<p>which I think looks a <em><strong>lot</strong></em> better from the outside, since you only have the ability to use the Console as an Object.</p>

<p>You may ask</p>

<blockquote><p>Why are Hybrids evil in the first place?</p></blockquote>

<p>Well, I think it was best framed by Robert C. Martin in <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?ie=UTF8&amp;qid=1315672495&amp;sr=8-1">Clean Code</a></p>

<blockquote><p>This issue would be a lot less confusing if data structures had public variables and no functions, whereas objects had private variables and public functions. However there are frameworks and standards (ie beans) that demand even simple data structures have accessors and mutators. &hellip;</p></blockquote>

<p>This confusion leads to unfortunate hybrid structures that are half object and half data structure. They have functions that do significant things, and they also have either public variables, or public accessors and mutators, that for all intents and purposes, make the private variables public, tempting other external functions to use those variables the way a procedural program would use a data structure.</p>

<p>Such hybrids make it hard to add a new function but also make it hard to add new data structures. They are the worst of both worlds. Avoid creating them. They are indicative of a muddled design whose authors are unsure of &ndash; or worse, ignorant of &ndash; whether they need protection from functions or types.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Team Maturity]]></title>
    <link href="http://josephbulger.github.io/blog/2011/09/07/team-maturity/"/>
    <updated>2011-09-07T08:00:06-04:00</updated>
    <id>http://josephbulger.github.io/blog/2011/09/07/team-maturity</id>
    <content type="html"><![CDATA[<p>This isn&rsquo;t an original idea of mine. It actually comes straight from <a href="http://5whys.com/blog/the-3-maturity-stages-of-a-software-team-and-how-scrum-fails.html">5whys.com</a>. I spend a lot of time as a leader researching how others lead their teams, and <a href="http://twitter.com/#!/RoyOsherove">@RoyOsherove</a>&rsquo;s writings are worth your time.</p>

<!-- more -->


<p>There are 3 maturity stages of a software team. This may be true for other industries as well, but for my purposes we&rsquo;ll be focusing on software. Roy defines these stages as:</p>

<ol>
<li><p> Chaos</p></li>
<li><p> Mid-Life</p></li>
<li><p> Mature</p></li>
</ol>


<p>but I actually like to describe them as</p>

<ol>
<li><p> Chaos</p></li>
<li><p> Learning</p></li>
<li><p> Self-Organizing</p></li>
</ol>


<p>This is only semantics, but when I talk to others about the different stages, people tend to understand the stages more inherently when I talk about the focal point of that stage.</p>

<p>There are some critically important things that as a lead you need to understand about these stages.</p>

<p>The most important thing a lead needs to understand is your role as a leader is completely different depending on what stage your team is in. We&rsquo;ll get into how your role changes based on each stage is later posts, but keep this in mind.</p>

<p>Secondly, from my experience, a team can go in and out of these stages. It can be cyclic, or they can jump around. It tends to be more of the former rather than the latter, but I have seen it happen both ways. As a leader, you need to keep an eye on your team and be able to identify when this change happens so that you can change your role within the team to get them back on track.</p>

<p>The goal is to grow mature, self-organizing teams. We&rsquo;ll cover more on this later, but if you can&rsquo;t wait you can always jump over to 5 whys. Roy has some great content that goes into great detail about each of these stages and how to manage them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOLID Principles: Liskov Substitution Principle]]></title>
    <link href="http://josephbulger.github.io/blog/2011/09/06/solid-principles-liskov-substitution-principle/"/>
    <updated>2011-09-06T08:00:10-04:00</updated>
    <id>http://josephbulger.github.io/blog/2011/09/06/solid-principles-liskov-substitution-principle</id>
    <content type="html"><![CDATA[<p>Liskov Substitution Principle, or LSP, is actually a very simple concept to understand in a strongly typed language. In languages like C#, or VB.NET, LSP often gets taken for granted, but I&rsquo;ve seen cases where even in strongly typed languages you can violate LSP.</p>

<!-- more -->


<p>Simply put, LSP means that for a given base class, you should be able to substitute derived classes in it&rsquo;s place, and the behavior or the expectation of that behavior should not change. Take for example a Shape:</p>

<div><script src='https://gist.github.com/1188522.js?file=Shape.cs'></script>
<noscript><pre><code>public abstract class Shape
{
    abstract double GetArea();
}</code></pre></noscript></div>


<p>The point of this class is to define something which has the ability to give us it&rsquo;s area back. Something like a Square</p>

<div><script src='https://gist.github.com/1188522.js?file=Square.cs'></script>
<noscript><pre><code>public class Square : Shape
{
    public Square(int side)
    {
        Side = side;
    }
    
    private int Side { get; set; }
    
    public override double GetArea()
    {
        return Side * Side;
    }
}
</code></pre></noscript></div>


<p>or a Circle</p>

<div><script src='https://gist.github.com/1188522.js?file=Circle.cs'></script>
<noscript><pre><code>public class Circle : Shape
{
    public Circle(int radius)
    {
        Radius = radius;
    }
    
    private int Radius { get; set; }
    
    public override double GetArea()
    {
        var area = 4 * Math.Pi * Radius * Radius;
        return ;
    }
}</code></pre></noscript></div>


<p>would have the means to give us this information.</p>

<p>However, something like a Line</p>

<div><script src='https://gist.github.com/1188522.js?file=Line.cs'></script>
<noscript><pre><code>public class Line : Shape
{
    public Line(int length)
    {
        Length = length;
    }
    
    private int Length { get; set; }
    
    public override double GetArea()
    {
        throw new NotSupportedException(
            @&quot;I&#39;m not really a shape!&quot;);
    }
}</code></pre></noscript></div>


<p>would not be able to give us it&rsquo;s area, because it doesn&rsquo;t have an area. In fact, it&rsquo;s not even a Shape to begin with. It seems odd that I would use this as an example, but the simplicity of the example shows exactly how LSP gets violated in practice. All too often I&rsquo;ll see code where a class is deriving from another class, even though it&rsquo;s shouldn&rsquo;t be. At the core of the issue is usually that it was never meant to <em><strong>be</strong></em> the thing it was deriving from in the first place.</p>

<p>A full running example of utilizing LSP can be found on this <a href="http://dimecasts.net/Content/WatchEpisode/92">video from dime casts</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOLID Principles: Open Closed Principle]]></title>
    <link href="http://josephbulger.github.io/blog/2011/09/02/solid-principles-open-closed-principle/"/>
    <updated>2011-09-02T08:00:41-04:00</updated>
    <id>http://josephbulger.github.io/blog/2011/09/02/solid-principles-open-closed-principle</id>
    <content type="html"><![CDATA[<p>This has been done to death I think, but I wanted to take a shot at it. In fact, this is really more for my benefit than for anyone else. If I can manage to explain these concepts clearly enough then I think I have a firm understanding of what they actually stand for, and how I should apply them when I build things. The first thing we&rsquo;re going to get into is the <a href="http://en.wikipedia.org/wiki/Open/closed_principle">Open Closed Principle</a>.</p>

<!-- more -->


<p>Why did I choose this one first? To be honest, this one was the last one that I found a use for. I understood the concept early on in my career, but I had issues figuring out when it was best to use it, and therefore I wouldn&rsquo;t really ever use it at all.</p>

<p>This made for some bad code. Some really bad code. But, such is the life of a developer. You basically go through 4 stages. First, you have no concept of some <em>thing</em>. Then you learn about this <em>thing</em>, which you then spend some time just understanding. Third comes the obsession stage, where you apply said <em>thing</em> to everything you do. And lastly, comes I guess what you would call the Maturing stage, which is when you learn the appropriateness of this <em>thing</em>.</p>

<p>In our case today, we&rsquo;re talking about the <a href="http://en.wikipedia.org/wiki/Solid_(object-oriented_design">SOLID</a>) principles, and specifically looking at OCP.</p>

<p>As I said before, this one took me some time to finally understand the usefulness of it. In fact, it was when I was reading <a href="http://artofunittesting.com/">The Art of Unit Testing</a> that this light bulb went off in my head. Actually, it wasn&rsquo;t a light bulb, it was more like a giant flood light or something. By the way, if you&rsquo;re new to TDD or unit testing, you have to read this book by <a href="http://twitter.com/#!/RoyOsherove">@RoyOsherove</a>. The part that really opened my eyes was when Roy started talking about building seams into your unit tests.</p>

<p>Up until that point, I had very heavily relied on interfaces for my mocking techniques. He goes over that more in the book, but the problem I was facing was that I needed interfaces for <strong>everything</strong>. A lot of times, though, it was a huge over kill for what I was trying to do. A seam was <strong><em>perfect</em></strong>. A seam was also the huge flood light going off in my brain. Why? Because a seam is literally applying OCP to a method with the purpose of later faking that method.</p>

<p>Instead of describing what I&rsquo;m saying I think so code might serve us better, so let&rsquo;s say you have some service class like this.</p>

<div><script src='https://gist.github.com/1187529.js?file=SimpleServiceWithoutOCP.cs'></script>
<noscript><pre><code>public class SimpleServiceWithoutOCP
{
    public void DoSomeWork()
    {
        var stuff = CallTheRepositoryForSomeStuff();
        
        foreach(var thing in stuff)
            DoSomething(thing);
    }
    
    private IList&lt;Stuff&gt; CallTheRepositoryForSomeStuff()
    {
        return Repository.GetStuff();
    }   
    
    private void DoSomething(Stuff stuff)
    {
        //doesn&#39;t matter what&#39;s here
    }
}
</code></pre></noscript></div>


<p>Now when you&rsquo;re writing tests to make sure this guy works, you&rsquo;ll probably want to make sure that DoSomeWork actually does what it says it does, so you&rsquo;d write a test that might look something like this.</p>

<div><script src='https://gist.github.com/1187529.js?file=SimpleServiceTest.cs'></script>
<noscript><pre><code>[TestFixture]
public class SimpleServiceTest
{
    [Test]
    public void DoSomeWork_WhenGivenStuff_CallsDoSomethingOnStuff()
    {
        var service = MockRepository
                    .GenerateMock&lt;SimpleServiceWithOCP&gt;();

                var expectedStuff = new Stuff();

        service.Expect(x =&gt; x.CallTheRepositoryForSomeStuff())
                       .Return(new List&lt;Stuff&gt; { expectedStuff });
        
        service.DoSomeWork();
    
        service.AssertWasCalled(
                        x =&gt; x.DoSomething(expectedStuff), 
                        &quot;this should be called when doing work&quot;);
    }
}</code></pre></noscript></div>


<p>So this test will create a mock (a type of fake) of your service, and then what we want to verify in this test is that when DoSomeWork is called, that it in turn will call DoWork on all the items that come from the Repository.</p>

<p>There&rsquo;s a problem, though. The problem is two fold. First, <em><strong>we don&rsquo;t want to use the real repository</strong></em>. If you don&rsquo;t understand why, read the book, trust me. Second, this code won&rsquo;t execute. You&rsquo;ll get a run time exception because there&rsquo;s no seam on CallTheRepositoryForSomeStuff. How do you make a seam? Well, you mark the method <em>virtual</em>, which allows sub-classes to change it&rsquo;s behavior.</p>

<div><script src='https://gist.github.com/1187529.js?file=SimpleServiceWithOCP.cs'></script>
<noscript><pre><code>public class SimpleServiceWithOCP
{
    public void DoSomeWork()
    {
        var stuff = CallTheRepositoryForSomeStuff();
        
        foreach(var thing in stuff)
            DoSomething(thing);
    }
    
    protected virtual IList&lt;Stuff&gt; CallTheRepositoryForSomeStuff()
    {
        return Repository.GetStuff();
    }   
    
    protected virtual void DoSomething(Stuff stuff)
    {
        //doesn&#39;t matter what&#39;s here
    }
}</code></pre></noscript></div>


<p>And <em><strong>that</strong></em> is OCP in a nut shell. It&rsquo;s OCP because our mocking framework doesn&rsquo;t have to actually open the file and change the existing class. In fact, what it does under the hood is create another class that is a sub-class of SimpleService, and then change the new class to have it do something besides go the real repository. In our case, we&rsquo;re just returned a new list with one item in it.</p>

<p>Want more info on the Open/Closed Principle? <a href="http://dimecasts.net/Casts/CastDetails/90">Check out this dime cast</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wireless Adapter Traps]]></title>
    <link href="http://josephbulger.github.io/blog/2011/08/08/wireless-adapter-traps/"/>
    <updated>2011-08-08T04:00:39-04:00</updated>
    <id>http://josephbulger.github.io/blog/2011/08/08/wireless-adapter-traps</id>
    <content type="html"><![CDATA[<p>Ok so you go to the store and you&rsquo;re looking around for an awesome deal on a Wireless-N adapter, and you find one for only $14!  &#8221;How can this be!?&ldquo; you might ask yourself?  Well, let me explain something to you before you end up with the same situation I find myself in right now.</p>

<!-- more -->


<p>Ok so my story goes a little differently than that, but it&rsquo;s basically the same thing.  My wife needed a new wireless adapter for her computer because the one she had was pathetically bad.</p>

<p>So, me being the tech nerd that I am, decided</p>

<blockquote><p>why not buy a Wireless-N adapter so when I upgrade my router in the next year or so she&rsquo;ll already be ready for it?</p></blockquote>

<p>So I went and got her a <a href="http://www.dlink.com/products/?pid=722">DLink DWA-125</a>.  Not only that but the price tag on the sucker was only like $14, which I thought was amazing.  Not until I <a href="http://josephbulger.github.io/blog/2011/08/07/linksys-e4200-retrospective/">upgraded my router</a> did I realize the error of my ways.  It&rsquo;s in the bands people, the bands will get you every time.</p>

<p>So I bought the adapter because it&rsquo;s Wireless-N.  And it is, don&rsquo;t get me wrong.  However, the bands it operates on are&hellip; well.. I should say&hellip; the <strong>band</strong> it operates on, is 2.4 GHz.  You might be thinking, &ldquo;what&rsquo;s the big deal Joe? Just connect to your router and go with it man.&rdquo;  Here&rsquo;s the problem. When you connect a device that runs G to a network that already has a device running on N, a couple things could happen.</p>

<p>You could be dropped to Wireless-G, and both adapters would run there.  Which kind of defeats the purpose of buying the N adapter, don&rsquo;t you think?</p>

<p>Or&hellip; Your network could go crazy and let the adapters battle it out, which is what happened to me.  Who won you might ask?  No one, because every time one of the adapters would lose connection, it would just try to get it back, which would essentially kick the other one off, etc. etc.</p>

<p>So be aware when purchasing N adapters.  If you&rsquo;re like me and you have G devices that you<strong> still need to use</strong>, then you better get an N adapter that runs on a 5GHz band. How do you know if your router can handle this set up?  Well&hellip; <a href="http://josephbulger.github.io/blog/2011/08/07/linksys-e4200-retrospective/">that&rsquo;s a different story</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linksys E4200: Retrospective]]></title>
    <link href="http://josephbulger.github.io/blog/2011/08/07/linksys-e4200-retrospective/"/>
    <updated>2011-08-07T12:25:13-04:00</updated>
    <id>http://josephbulger.github.io/blog/2011/08/07/linksys-e4200-retrospective</id>
    <content type="html"><![CDATA[<p>I just recently retired my <a href="http://en.wikipedia.org/wiki/Linksys_WRT54G_series">WRT54G</a> in favor or a Wireless N Router.  I ended up going with the <a href="http://homestore.cisco.com/en-us/Routers/Linksys-E4200-MaximumPerformance-Wirelessn-router_stcVVproductId122703236VVcatId551966VVviewprod.htm">Linksys E4200</a> for a number of reasons.<!-- more --></p>

<p>First of all, it&rsquo;s a high performance router, and so far it&rsquo;s lived up to that expectation.  What do I mean by a high performance router?</p>

<blockquote><p>It&rsquo;s capable of handling 450 Mbps on the 5GHz band.</p></blockquote>

<p>We&rsquo;ll get to the band in a second.  This is going to be extremely useful for me later on when I start setting up a NAS in my house to stream content.</p>

<p>Secondly, it&rsquo;s a dual band router.  What exactly is a dual band router? It&rsquo;s pretty simple actually.</p>

<blockquote><p>The router has the ability to host two networks (3 if you include the guest network): one on a 5GHz band, and another on a 2.4 GHz band.</p></blockquote>

<p>Now, there are a couple catches here.  First, this router is a <strong>true</strong> dual band router.  What I mean by that is that it can run both bands <strong>simulataneously</strong>.  If you&rsquo;re in the market for a new router, you have to keep this in mind because you could be looking at a router that says it&rsquo;s dual band, but when you bring it home, it can&rsquo;t run them both at the same time, you have to choose which one to roll with.</p>

<p>For me, I have to have both bands up at the same time, which brings me to the second catch.  If you have devices (PCs, IPods, IPhones, Androids, etc.)  then it&rsquo;s likely that some are going to run on Wireless-G and some have Wireless-N.  In my household, most of the devices run on Wireless-G, and I have a couple that can run Wireless-N.</p>

<p>Here&rsquo;s the catch.  If you have a Wireless-N capable router and you have devices that are connecting to it via Wireless-G and Wireless-N <strong>on the same band</strong>, then the router has to choose the lesser of the two, which means everyone on that band is stuck on Wireless-G.  This goes for all routers, by the way.  This is where the two bands come into play.  If you have two bands, you can set one band up to run Wireless-N (5 GHz), and you can set up the other to be Wireless-G (2 GHz).</p>

<p>This brings me to the first complaint that I have about the E4200.  When I originally set up the router, I <strong>assumed</strong> that the router would be configured out of the box to handle the exact scenario that I described previously.  However, what I came to find out was that my router, out of the box, was configured in some kind of Mixed Mode setting for <strong>both bands</strong>.  This wreaked havoc on my network for a day or two because I didn&rsquo;t realize what was going on, and chalked it up to Comcast screwing with my internet again (they have a tendency to do this).  However, after sitting down for a second and thinking about it, I decided to go digging around in the settings and that&rsquo;s when I discovered the mixed mode issue.</p>

<p>This wouldn&rsquo;t have normally been a problem, except for one thing:</p>

<blockquote><p>I have a couple of devices at home that are Wireless-N but they only operate on the 2.4 GHz band.</p></blockquote>

<p>This caused a war to ensue on the router between my G devices and my N devices, the winner being no one. Long story short, I ended up doing a manual set up on my router, where the 5GHz band was configured to run only Wireless-N and the 2.4 GHz band was configured Wireless-G only.  Why did I do it that way?  Because Wireless-G devices can only operate on 2.4 GHz band, and the devices that I have that only handle Wireless-N on the 2.4 band automatically negotiate down to Wireless-G when connecting to the router on 2.4 now, which is what would happen to them anyway.</p>

<p>Once I did that the war ended and now everything is playing nicely together.  There has been one other snag along the way, but I&rsquo;ll save that for another post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A simple way to see if someone is spam scamming you]]></title>
    <link href="http://josephbulger.github.io/blog/2011/01/21/a-simple-way-to-see-if-someone-is-spam-scamming-you/"/>
    <updated>2011-01-21T03:19:14-05:00</updated>
    <id>http://josephbulger.github.io/blog/2011/01/21/a-simple-way-to-see-if-someone-is-spam-scamming-you</id>
    <content type="html"><![CDATA[<p>I hate having to sign up for anything on the internet. If I can avoid it I will, but nevertheless at some point you’re going to have to sign up for something.</p>

<!-- more -->


<p>Now, with signing up comes the distinct possibility that the site you’re signing up on will give your email away to someone, either intentionally or not.  Well, I use gmail as my email server, and one of the really cool features that they recognize is Address Tags.</p>

<p>What are Address Tags?  I’ll show you.  Let’s say you sign up for some site, but you want to know if they pass your email on to someone else.  When they ask for you email address, you can tag your email with something specific to that site.  Say, for example, that my email is <a href="mailto:john.doe@gmail.com">john.doe@gmail.com</a>.  When I sign up on a site and give my email, I could instead give them <a href="mailto:john.doe+youreascumbag@gmail.com">john.doe+youreascumbag@gmail.com</a> and it would still go to <strong>my </strong>email.  This is pretty cool, because now whenever they send you an email, you’ll have that tag in your address, so you’ll know it was definitely from them, but also, if they give out that email to anyone else and <strong>they contact you</strong> it will be the same email, so you’ll at least <strong>know </strong>who’s spam scamming you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When Windows tells you that it's not geniune...]]></title>
    <link href="http://josephbulger.github.io/blog/2010/09/07/when-windows-tells-you-that-its-not-geniune/"/>
    <updated>2010-09-07T07:16:52-04:00</updated>
    <id>http://josephbulger.github.io/blog/2010/09/07/when-windows-tells-you-that-its-not-geniune</id>
    <content type="html"><![CDATA[<p>I recently had to go through this because my windows installation started telling me it was not genuine and I needed to activate it.  This was completely false, being that the key I was using to activate the product was completely legit.</p>

<p>So if you find yourself in the same boat as me, and you are wondering what you should do, follow these steps.<!-- more --></p>

<p>Once you have a valid Key it remains valid and it is that way that MS designed it. However, corrupted licensing files may occur once there is an infection or it could be more reasons around there. Nonetheless try this entering these command on an &ldquo;elevated DOS prompt&rdquo; (click start> type CMD> right click CMD icon and run as admin)</p>

<ol>
<li><p>type slmgr /upk and press enter ( a notification should pop up that the PK has been uninstalled)</p></li>
<li><p>type slmgr /cpky and press enter (this clears out the PK from registry)</p></li>
<li><p>type slmgr /rilc and press enter ( this will reinstall licensing files)</p></li>
<li><p>restart your computer twice, (if it would ask you to enter the product key on the 1st restart click ask me later and restart once more)</p></li>
<li><p>After the 2nd restart, it will ask you to enter the PK, Yes enter it. It will automatically validate but maybe if you&rsquo;re lucky it would take it. If not,.. step 6.</p></li>
<li><p>click start  and type &ldquo;slui 4&rdquo; (without the quotes) and press enter. This will open the phone activation option. Choose your country correctly and phone in the activation server. At this point, the installation ID should be valid (unless you are using pirated copy or product key) and the phone activation server will give you the confirmation ID. It will ask you how many times you have installed your copy&mdash; of course just say once.</p></li>
</ol>


<p><a href="http://social.technet.microsoft.com/Forums/en-US/w7itproinstall/thread/f0ec949f-4865-4a63-849c-af386de1b1fa">The original article I found this from was here.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Contract By Design over the wire and a possible solution]]></title>
    <link href="http://josephbulger.github.io/blog/2010/04/29/using-contract-by-design-over-the-wire-and-a-possible-solution/"/>
    <updated>2010-04-29T04:10:29-04:00</updated>
    <id>http://josephbulger.github.io/blog/2010/04/29/using-contract-by-design-over-the-wire-and-a-possible-solution</id>
    <content type="html"><![CDATA[<p>I’ve been plagued with an issue that I have yet to find a solution for.</p>

<p>This is really more for my benefit so I can research this later, but basically when I create classes I tend to decouple them by using interfaces, especially between layers.</p>

<!-- more -->


<p>The problem is when you use a service layer, such as WCF, that the class that is generated on the client side doesn’t carry the implementations that the server side class has.</p>

<p>Then I found <a href="http://blogs.microsoft.co.il/blogs/gilf/archive/2010/04/28/add-service-reference-how-to-avoid-generating-already-existing-classes.aspx">this article</a> which might be my saving grace.  It lefts you actually reference the same class on the client side.  This might be solution I’m looking for.</p>

<p>Once I get a chance to test this out I’ll post the results with some code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating an PagedList<T> that uses AJAX]]></title>
    <link href="http://josephbulger.github.io/blog/2010/04/14/creating-an-pagedlistt-that-uses-ajax/"/>
    <updated>2010-04-14T05:05:58-04:00</updated>
    <id>http://josephbulger.github.io/blog/2010/04/14/creating-an-pagedlistt-that-uses-ajax</id>
    <content type="html"><![CDATA[<p>I’ve been using this PagedList functionality that i found from a <a href="http://blog.wekeroad.com/2007/12/10/aspnet-mvc-pagedlistt/">blog article Rob Conery</a> put up, and <a href="http://code-inside.de/blog-in/2008/04/08/aspnet-mvc-pagination-view-user-control/">a control I found by Robert Muehsig</a> which I’ve really enjoyed using so far.</p>

<p>One of the things that was missing from the functional set that I ended up needing was the ability to page the list, but through issuing AJAX requests instead of the typical post back.</p>

<p>So I went off and extended the existing model to support AJAX requests, and thought I would share it in case anyone else needed to do the same thing.<!-- more --></p>

<p>I guess the best place to start would be the use case.  So to start I created a control that encapsulates the Paging UI layout and calls I need.  The use of the original control looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">Html</span><span class="p">.</span><span class="n">RenderPartial</span><span class="p">(</span><span class="s">&quot;AjaxPagination&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">new</span> <span class="n">AjaxPaginationViewData</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">PageIndex</span> <span class="p">=</span> <span class="n">Model</span><span class="p">.</span><span class="n">PageIndex</span><span class="p">,</span>
</span><span class='line'>            <span class="n">Action</span> <span class="p">=</span> <span class="s">&quot;CondoPage&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">Controller</span> <span class="p">=</span> <span class="s">&quot;Home&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">AjaxOptions</span> <span class="p">=</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">AjaxOptions</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">UpdateTargetId</span> <span class="p">=</span> <span class="s">&quot;updatedContent&quot;</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">TotalCount</span> <span class="p">=</span> <span class="n">Model</span><span class="p">.</span><span class="n">TotalCount</span><span class="p">,</span>
</span><span class='line'>            <span class="n">PageSize</span> <span class="p">=</span> <span class="n">Model</span><span class="p">.</span><span class="n">PageSize</span><span class="p">,</span>
</span><span class='line'>            <span class="n">NumberOfPagesToEachSide</span> <span class="p">=</span> <span class="m">2</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The new AJAX functionality is called similarly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="p">&lt;%</span> <span class="k">using</span> <span class="p">(</span><span class="n">Ajax</span><span class="p">.</span><span class="n">BeginForm</span><span class="p">(</span><span class="s">&quot;SomePage&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;SomeController&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">AjaxOptions</span> <span class="p">{</span> <span class="n">UpdateTargetId</span> <span class="p">=</span> <span class="s">&quot;updatedContent&quot;</span> <span class="p">}))</span> <span class="p">{</span> <span class="p">%&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">&lt;%</span> <span class="n">Html</span><span class="p">.</span><span class="n">RenderPartial</span><span class="p">(</span><span class="s">&quot;AjaxPagination&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">AjaxPaginationViewData</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">PageIndex</span> <span class="p">=</span> <span class="n">Model</span><span class="p">.</span><span class="n">PageIndex</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">Action</span> <span class="p">=</span> <span class="s">&quot;SomeAction&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">Controller</span> <span class="p">=</span> <span class="s">&quot;SomeController&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">AjaxOptions</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AjaxOptions</span>
</span><span class='line'>                        <span class="p">{</span> <span class="n">UpdateTargetId</span> <span class="p">=</span> <span class="s">&quot;updatedContent&quot;</span> <span class="p">},</span>
</span><span class='line'>                    <span class="n">TotalCount</span> <span class="p">=</span> <span class="n">Model</span><span class="p">.</span><span class="n">TotalCount</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">PageSize</span> <span class="p">=</span> <span class="n">Model</span><span class="p">.</span><span class="n">PageSize</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">NumberOfPagesToEachSide</span> <span class="p">=</span> <span class="m">2</span>
</span><span class='line'>        <span class="p">});%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;%</span> <span class="p">}</span> <span class="p">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A couple things to note. You’ll notice that the AJAX control is rendered inside a Ajax.BeginForm. This is because I’m using the Microsoft.Ajax way of making AJAX calls.  This could also be done using jQuery or something else that can process AJAX calls. I just went this way because the scripts are already included in asp.net mvc app when you first create the project.  The result of the AJAX call will be a partial view, and we’ll need to put that somewhere.  That’s where the UpdatedTargetId comes into play. Other things we include in the AJAX control that are not in the original are the Action and the Controller, and some AjaxOptions. PageActionLink doesn’t work with the AJAX control, because we’ll be using Ajax.ActionLink to build the link, which is why I broke it up into Action, and Controller. For the AjaxOptions, we need those to specify the target of the call.</p>

<p>So now that’s been explained, let’s look at the controls themselves.  Here’s a comparison of the original control and the ajax control.</p>

<p>The original is one this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="p">&lt;%</span> <span class="k">if</span> <span class="p">(</span><span class="n">Model</span><span class="p">.</span><span class="n">HasPreviousPage</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;</span>
</span><span class='line'>    <span class="p">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="p">=</span><span class="s">&quot;&lt;%=Model.PageActionLink.Replace(&quot;</span><span class="p">%</span><span class="m">7</span><span class="n">Bpage</span><span class="p">%</span><span class="m">7D</span><span class="s">&quot;, (Model.PageIndex - 1).ToString())%&gt;&quot;</span><span class="p">&gt;</span><span class="n">Previous</span><span class="p">&lt;/</span><span class="n">a</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">&lt;%</span> <span class="p">}</span> <span class="p">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;%</span> <span class="k">if</span> <span class="p">(</span><span class="n">Model</span><span class="p">.</span><span class="n">GetFirstPageToLink</span><span class="p">()</span> <span class="p">!=</span> <span class="m">1</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;...&lt;%</span> <span class="p">}</span> <span class="p">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;%</span><span class="k">for</span> <span class="p">(</span><span class="kt">var</span> <span class="n">page</span> <span class="p">=</span> <span class="n">Model</span><span class="p">.</span><span class="n">GetFirstPageToLink</span><span class="p">();</span> <span class="n">page</span> <span class="p">&lt;=</span> <span class="n">Model</span><span class="p">.</span><span class="n">GetLastPageToLink</span><span class="p">();</span> <span class="n">page</span><span class="p">++)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">page</span> <span class="p">==</span> <span class="n">Model</span><span class="p">.</span><span class="n">PageIndex</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;</span>
</span><span class='line'>        <span class="p">&lt;%=</span><span class="n">page</span><span class="p">.</span><span class="n">ToString</span><span class="p">()%&gt;</span>
</span><span class='line'><span class="p">&lt;%</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="p">%&gt;</span>
</span><span class='line'>    <span class="p">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="p">=</span><span class="s">&quot;&lt;%=Model.PageActionLink.Replace(&quot;</span><span class="p">%</span><span class="m">7</span><span class="n">Bpage</span><span class="p">%</span><span class="m">7D</span><span class="s">&quot;, page.ToString())%&gt;&quot;</span><span class="p">&gt;&lt;%=</span><span class="n">page</span><span class="p">.</span><span class="n">ToString</span><span class="p">()%&gt;&lt;/</span><span class="n">a</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">&lt;%</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">page</span> <span class="p">!=</span> <span class="n">Model</span><span class="p">.</span><span class="n">GetLastPageToLink</span><span class="p">())</span> <span class="p">{</span> <span class="p">%&gt;|&lt;%</span> <span class="p">}</span> <span class="p">}</span> <span class="p">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;%</span> <span class="k">if</span> <span class="p">(</span><span class="n">Model</span><span class="p">.</span><span class="n">GetLastPageToLink</span><span class="p">()</span> <span class="p">!=</span> <span class="n">Model</span><span class="p">.</span><span class="n">PageCount</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;...&lt;%</span> <span class="p">}</span> <span class="p">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;%</span> <span class="k">if</span> <span class="p">(</span><span class="n">Model</span><span class="p">.</span><span class="n">HasNextPage</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;</span>
</span><span class='line'>    <span class="p">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="p">=</span><span class="s">&quot;&lt;%=Model.PageActionLink.Replace(&quot;</span><span class="p">%</span><span class="m">7</span><span class="n">Bpage</span><span class="p">%</span><span class="m">7D</span><span class="s">&quot;, (Model.PageIndex + 1).ToString())%&gt;&quot;</span><span class="p">&gt;</span><span class="n">Next</span><span class="p">&lt;/</span><span class="n">a</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">&lt;%</span> <span class="p">}</span> <span class="p">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the AJAX control is done this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="p">&lt;%</span> <span class="k">if</span> <span class="p">(</span><span class="n">Model</span><span class="p">.</span><span class="n">HasPreviousPage</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;%=</span> <span class="n">Ajax</span><span class="p">.</span><span class="n">ActionLink</span><span class="p">(</span><span class="s">&quot;Previous&quot;</span><span class="p">,</span> <span class="n">Model</span><span class="p">.</span><span class="n">Action</span><span class="p">,</span> <span class="n">Model</span><span class="p">.</span><span class="n">Controller</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">page</span> <span class="p">=</span> <span class="p">(</span><span class="n">Model</span><span class="p">.</span><span class="n">PageIndex</span> <span class="p">-</span> <span class="m">1</span><span class="p">).</span><span class="n">ToString</span><span class="p">()</span> <span class="p">},</span> <span class="n">Model</span><span class="p">.</span><span class="n">AjaxOptions</span><span class="p">)%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;%</span> <span class="p">}</span> <span class="p">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;%</span> <span class="k">if</span> <span class="p">(</span><span class="n">Model</span><span class="p">.</span><span class="n">GetFirstPageToLink</span><span class="p">()</span> <span class="p">!=</span> <span class="m">1</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;...&lt;%</span> <span class="p">}</span> <span class="p">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;%</span><span class="k">for</span> <span class="p">(</span><span class="kt">var</span> <span class="n">page</span> <span class="p">=</span> <span class="n">Model</span><span class="p">.</span><span class="n">GetFirstPageToLink</span><span class="p">();</span> <span class="n">page</span> <span class="p">&lt;=</span> <span class="n">Model</span><span class="p">.</span><span class="n">GetLastPageToLink</span><span class="p">();</span> <span class="n">page</span><span class="p">++)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">page</span> <span class="p">==</span> <span class="n">Model</span><span class="p">.</span><span class="n">PageIndex</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;</span>
</span><span class='line'>        <span class="p">&lt;%=</span><span class="n">page</span><span class="p">.</span><span class="n">ToString</span><span class="p">()%&gt;</span>
</span><span class='line'>    <span class="p">&lt;%</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="p">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;%=</span> <span class="n">Ajax</span><span class="p">.</span><span class="n">ActionLink</span><span class="p">(</span><span class="n">page</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">Model</span><span class="p">.</span><span class="n">Action</span><span class="p">,</span> <span class="n">Model</span><span class="p">.</span><span class="n">Controller</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">page</span> <span class="p">=</span> <span class="n">page</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="p">},</span> <span class="n">Model</span><span class="p">.</span><span class="n">AjaxOptions</span><span class="p">)%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;%</span> <span class="p">}</span> <span class="k">if</span> <span class="p">(</span><span class="n">page</span> <span class="p">!=</span> <span class="n">Model</span><span class="p">.</span><span class="n">GetLastPageToLink</span><span class="p">())</span> <span class="p">{</span> <span class="p">%&gt;</span> <span class="p">|</span> <span class="p">&lt;%</span> <span class="p">}</span> <span class="p">}</span> <span class="p">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;%</span> <span class="k">if</span> <span class="p">(</span><span class="n">Model</span><span class="p">.</span><span class="n">GetLastPageToLink</span><span class="p">()</span> <span class="p">!=</span> <span class="n">Model</span><span class="p">.</span><span class="n">PageCount</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;...&lt;%</span> <span class="p">}</span> <span class="p">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;%</span> <span class="k">if</span> <span class="p">(</span><span class="n">Model</span><span class="p">.</span><span class="n">HasNextPage</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;%=</span> <span class="n">Ajax</span><span class="p">.</span><span class="n">ActionLink</span><span class="p">(</span><span class="s">&quot;Next&quot;</span><span class="p">,</span> <span class="n">Model</span><span class="p">.</span><span class="n">Action</span><span class="p">,</span> <span class="n">Model</span><span class="p">.</span><span class="n">Controller</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">page</span> <span class="p">=</span> <span class="p">(</span><span class="n">Model</span><span class="p">.</span><span class="n">PageIndex</span> <span class="p">+</span> <span class="m">1</span><span class="p">).</span><span class="n">ToString</span><span class="p">()</span> <span class="p">},</span> <span class="n">Model</span><span class="p">.</span><span class="n">AjaxOptions</span><span class="p">)%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;%</span> <span class="p">}</span> <span class="p">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The big difference here is the way that the links are generated. The original control simply creates an anchor tag and passes in the url generated by the Model. The AJAX control uses AJAX.ActionLink() instead, so we can have the link support AJAX.</p>

<p>So knowing how the control looks, this is the Model for the AJAX control itself:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AjaxPaginationViewData</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">NumberOfPagesToEachSide</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">PageIndex</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">PageSize</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">TotalCount</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Action</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Controller</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">AjaxOptions</span> <span class="n">AjaxOptions</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">PageCount</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">Math</span><span class="p">.</span><span class="n">Ceiling</span><span class="p">((</span><span class="kt">double</span><span class="p">)</span><span class="n">TotalCount</span> <span class="p">/</span> <span class="n">PageSize</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">bool</span> <span class="n">HasPreviousPage</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="n">PageIndex</span> <span class="p">&gt;</span> <span class="m">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">bool</span> <span class="n">HasNextPage</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="n">PageIndex</span> <span class="p">*</span> <span class="n">PageSize</span><span class="p">)</span> <span class="p">&lt;=</span> <span class="n">TotalCount</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="nf">GetFirstPageToLink</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">PageIndex</span> <span class="p">-</span> <span class="n">NumberOfPagesToEachSide</span> <span class="p">&gt;</span> <span class="m">1</span> <span class="p">?</span> <span class="n">PageIndex</span> <span class="p">-</span> <span class="n">NumberOfPagesToEachSide</span> <span class="p">:</span> <span class="m">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="nf">GetLastPageToLink</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">PageIndex</span> <span class="p">+</span> <span class="n">NumberOfPagesToEachSide</span> <span class="p">&lt;</span> <span class="n">PageCount</span> <span class="p">?</span> <span class="n">PageIndex</span> <span class="p">+</span> <span class="n">NumberOfPagesToEachSide</span> <span class="p">:</span> <span class="n">PageCount</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That pretty much explains how the control is built.</p>

<p>The only thing left is how the interaction with PagedList happens.  For that we look at the action that the control calls.  In this example, we’re calling SomeAction in SomeController, and it would look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">SomeAction</span><span class="p">(</span><span class="kt">int</span> <span class="n">page</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CachedPage</span> <span class="p">=</span> <span class="n">page</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="n">GetSearchQuery</span><span class="p">(</span><span class="n">CachedSearchParameters</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">model</span> <span class="p">=</span> <span class="n">query</span><span class="p">.</span><span class="n">ToPagedList</span><span class="p">(</span><span class="n">page</span><span class="p">,</span> <span class="n">DefaultPageSize</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">PartialView</span><span class="p">(</span><span class="s">&quot;AjaxResults&quot;</span><span class="p">,</span> <span class="n">model</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The ToPagedList performs the functionality that is included with the PagedList classes which you can find <a href="http://pagedlist.codeplex.com/">here</a>.</p>

<p>Let me know what you think, and if you’d like some demo source to see this in action I can happily provide, just let me know.</p>
]]></content>
  </entry>
  
</feed>
