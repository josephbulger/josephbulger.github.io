<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Authorization | Joseph Bulger]]></title>
  <link href="http://josephbulger.com/blog/categories/authorization/atom.xml" rel="self"/>
  <link href="http://josephbulger.com/"/>
  <updated>2014-08-25T19:20:54-04:00</updated>
  <id>http://josephbulger.com/</id>
  <author>
    <name><![CDATA[Joseph Bulger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Resolve a Complex Type as a String Implicitly]]></title>
    <link href="http://josephbulger.com/blog/2010/09/30/how-to-resolve-a-complex-type-as-a-string-implicitly/"/>
    <updated>2010-09-30T13:00:00-04:00</updated>
    <id>http://josephbulger.com/blog/2010/09/30/how-to-resolve-a-complex-type-as-a-string-implicitly</id>
    <content type="html"><![CDATA[<p>Along the same lines as resolving a complex type in a conditional, I also want to be able to take the same Authorization Result, and use it to broadcast a message to the system (or user), and tell them why couldn’t they be authorized.<!-- more --></p>

<p>An example of the behavior I’m looking for is something like this:</p>

<p>``` c#
var authorizationResult = Is.CurrentUser.AuthorizedTo.DoSomething();
if (!authorizationResult)</p>

<pre><code>throw new AuthorizationException(authorizationResult);
</code></pre>

<p>```</p>

<p>The Authorization Exception takes a String in it&rsquo;s constructor, just like a typical Exception. It does not take an AuthorizationResult. So how am I able to just pass in an authorizationResult like that? Again, the implicit operator is all we need:</p>

<p>``` c#
public class AuthorizationResult
{</p>

<pre><code>public bool IList&lt;reason&gt; Reasons { get; set; }
public static implicit operator string(AuthorizationResult authorizationResult)
{
    if (authorizationResult.With(x =&amp;gt; x.Reasons) == null)
        return false;
    var result = new StringBuilder();
    foreach (var reason in authorizationResult.Reasons)
    {
        result.AppendLine(reason.Message);
    }
    return result.ToString();
}
</code></pre>

<p>}
```</p>

<p>Now I can use AuthorizationResult implicitly as both a bool and a string.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use a Complex Type in a Conditional]]></title>
    <link href="http://josephbulger.com/blog/2010/09/30/how-to-use-a-complex-type-in-a-conditional/"/>
    <updated>2010-09-30T03:38:57-04:00</updated>
    <id>http://josephbulger.com/blog/2010/09/30/how-to-use-a-complex-type-in-a-conditional</id>
    <content type="html"><![CDATA[<p>I am building a basic authorization framework, and I have really liked the use of it so far.</p>

<p>It basically looks something like this<!-- more --></p>

<p><code>c#
var result = Is.CurrentUser.AuthorizedTo.DoSomething();
</code></p>

<p>The result that I get back is not actually a boolean, as you might thing.  It&rsquo;s a complex type that I built so I could not only determine if authorization was successful or not, but also <strong>why not</strong>.</p>

<p>So you can do this:</p>

<p><code>c#
result.IsAuthorized
</code></p>

<p>and you can also do this:</p>

<p><code>c#
result.WhyNot
</code></p>

<p>WhyNot will actually give you back a list of Reasons, which you can then use to inform the system (or user) why they can&rsquo;t do something.</p>

<p>So what&rsquo;s the problem? Sometimes I just don&rsquo;t care why not, I just want to do the check quickly and be done with it, which makes me want to do something like this instead:</p>

<p><code>c#
if (Is.CurrentUser.AuthorizedTo.DoSomething())
</code></p>

<p>This won&rsquo;t compile, because my complex type can&rsquo;t resolve to a bool.  Not to worry, though, implicit operator to the rescue:</p>

<p>``` c#
public class AuthorizationResult
{</p>

<pre><code>    public bool IsAuthorized { get; set; }
    public static implicit operator bool(AuthorizationResult authorizationResult)
    {
        if (authorizationResult == null)
            return false;
        return authorizationResult.IsAuthorized;
    }
</code></pre>

<p>}
```</p>

<p>Next post I&rsquo;ll talk about how I do the same thing for outputting the reasons implicitly.</p>
]]></content>
  </entry>
  
</feed>
