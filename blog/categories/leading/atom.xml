<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Leading | Joseph Bulger]]></title>
  <link href="http://josephbulger.com/blog/categories/leading/atom.xml" rel="self"/>
  <link href="http://josephbulger.com/"/>
  <updated>2014-08-24T20:46:43-04:00</updated>
  <id>http://josephbulger.com/</id>
  <author>
    <name><![CDATA[Joseph Bulger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Team Maturity: Learning]]></title>
    <link href="http://josephbulger.com/blog/2011/09/15/team-maturity-learning/"/>
    <updated>2011-09-15T14:00:55-04:00</updated>
    <id>http://josephbulger.com/blog/2011/09/15/team-maturity-learning</id>
    <content type="html"><![CDATA[<p>So you&rsquo;re team now has time to learn, and some of them (if not all), are taking advantage of that. How do you get them to be self-organizing? That&rsquo;s where you start pushing responsibilities onto your team.</p>

<!-- more -->


<p>The problem with teams that are not self-organizing is that they don&rsquo;t have the skills <em><strong>to be</strong></em> self-organizing. Your job is to identify what skills are lacking, and give them the opportunities to grow those skills.</p>

<p>This usually involves a couple of different areas. Your team won&rsquo;t need help in technical areas, mostly, because they focus on that themselves. There are exceptions, but to get them to self-organizing, you want them to focus on other areas too.</p>

<p>When a team member comes to you with a problem, don&rsquo;t solve it for them. Give them the tools they need to solve it for themselves. Let them grow. They may hate you for it at first, but in the end it will be very rewarding for them, and the good ones will recognize and appreciate what you&rsquo;ve done for them.</p>

<p>Find your leaders. They will be the ones who will lead when you get to self-organizing. Give them the tools they need to learn how to do your job. No, they&rsquo;re not going to replace you, and you won&rsquo;t lose your job. If you can grow one leader to do your job so well that they <em><strong>can</strong></em> replace you, and a team to be self-organizing, then you&rsquo;ve just shown that you have the ability to grow teams. Any company will see that and capitalize on your abilities to produce good teams.</p>

<p>When your in the chaos stage, you spend a lot of time putting up barriers between your team and the outside world. This is to protect them so you can give them room to learn and grow. You&rsquo;re not in chaos anymore, though, and it&rsquo;s time to start taking down some of those barriers. Your team needs to grow in the areas that are <em><strong>outside</strong></em> of the barriers you put up. Lower your barriers, and let your team learn to handle what&rsquo;s in the outside world. Clients, business analysts, project managers, etc. They need to learn how to deal with different actors, people besides QA and their team lead.</p>

<p>Eventually they&rsquo;ll grow to the final stage, Self-Organizing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Team Maturity: Chaos]]></title>
    <link href="http://josephbulger.com/blog/2011/09/13/team-maturity-chaos/"/>
    <updated>2011-09-13T14:00:10-04:00</updated>
    <id>http://josephbulger.com/blog/2011/09/13/team-maturity-chaos</id>
    <content type="html"><![CDATA[<p>So how do you know if your team is in choas? Actually, most teams are in the chaos stage. Learning to identify when a team has gotten into chaos isn&rsquo;t really that hard if you follow some simple guidelines, though.</p>

<!-- more -->


<p>Ask yourself a simple question.</p>

<blockquote><p>Does my team have enough time to learn new things?</p></blockquote>

<p>If the answer is no, then you&rsquo;re in chaos. I&rsquo;ll go one step further. If the answer was &ldquo;no, why does my team need to learn anything?&rdquo;, then you&rsquo;re in chaos, and if you want to fix it you need to look at yourself.</p>

<p>All teams need time to learn. This is important so that they can become more productive, and to move towards being self-organizing. If they can&rsquo;t learn then they&rsquo;ll never get the self-organizing stage.</p>

<p>If you&rsquo;re with me so far, then you&rsquo;re probably asking</p>

<blockquote><p>How do I make time for my team to learn?</p></blockquote>

<p>It starts by identifying why you&rsquo;re team doesn&rsquo;t have time. Sometimes it can be as simple as giving them some extra time in the week to learn something new. Tell your team they can have 4 hours on Friday to learn whatever they want. This will let you see which people on your team are self-motivated. This is vitally important. It identifies your <strong><em>leaders</em></strong>. For those who choose not to learn anything, make it a requirement. The best way to go about doing this is to just ask people how they&rsquo;re learning is going. Maybe every Monday you ask each team member individually what thing they learned on Friday. This is great because it sets up an expectation for them that they not only have the opportunity to learn, but that you&rsquo;re <em><strong>expecting</strong></em> them to learn.</p>

<p>Not all teams will have time for this. Your release cycle swamps you with work, for various reasons, and prevents you from being able to give this critical time to your team. So what then? That&rsquo;s when you&rsquo;re role become a fire fighter of sorts. You have to put out the fires. The point here, though, is to extinguish the fire, permanently. If you&rsquo;re putting out one fire, and two fires pop up in it&rsquo;s place, then you have another issue which needs to be addressed. You&rsquo;re the team leader, and it&rsquo;s your job to control the fire. You have to shield your team, that&rsquo;s your job during this stage. That means putting out fires, but it also means <em><strong>not allowing other fires to start in the first place</strong></em>.</p>

<p>This is usually a good indication that you&rsquo;re lacking tools that help your team be more productive. For example, maybe your &ldquo;fire&rdquo; is releases. They take too long to do, because they&rsquo;re manual. You release often, so it&rsquo;s something you spend a lot of time on. Why isn&rsquo;t your release process automated? Take a step back, is your build process automated? No? That&rsquo;s the beginning of your problem. You can&rsquo;t have an automated release process if you don&rsquo;t have an automated build process. Another example, is it hard for your team to share projects? Do you find yourself in situations where two people are working on the same thing and stepping on each other&rsquo;s toes a lot? Does this require you to put people on separate projects so you don&rsquo;t get into a tangled web of conflicts? Yes?</p>

<p>Are you using source control?</p>

<p>No? Get it.</p>

<p>Yes? Are you using a <em><strong>good</strong></em> source control system? Your team needs to be able to work together, and if your source control doesn&rsquo;t accommodate that it&rsquo;s probably because it&rsquo;s not so great. Try a new one. Maybe Git, or Mercurial, or if you&rsquo;re not into <a href="http://en.wikipedia.org/wiki/Distributed_revision_control">DVCS</a>, try SVN.</p>

<p>There are a lot of things that can hinder your team&rsquo;s productivity. Most of them have been solved by other teams already using automation. You&rsquo;re team probably isn&rsquo;t special, and their problems have probably been solved by other (bigger and more productive) teams. See what they&rsquo;ve done. Copy them, mimic them, learn from them.</p>

<p>Get your team out of chaos, so they can learn, and make your job easier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Team Maturity]]></title>
    <link href="http://josephbulger.com/blog/2011/09/07/team-maturity/"/>
    <updated>2011-09-07T08:00:06-04:00</updated>
    <id>http://josephbulger.com/blog/2011/09/07/team-maturity</id>
    <content type="html"><![CDATA[<p>This isn&rsquo;t an original idea of mine. It actually comes straight from <a href="http://5whys.com/blog/the-3-maturity-stages-of-a-software-team-and-how-scrum-fails.html">5whys.com</a>. I spend a lot of time as a leader researching how others lead their teams, and <a href="http://twitter.com/#!/RoyOsherove">@RoyOsherove</a>&rsquo;s writings are worth your time.</p>

<!-- more -->


<p>There are 3 maturity stages of a software team. This may be true for other industries as well, but for my purposes we&rsquo;ll be focusing on software. Roy defines these stages as:</p>

<ol>
<li><p> Chaos</p></li>
<li><p> Mid-Life</p></li>
<li><p> Mature</p></li>
</ol>


<p>but I actually like to describe them as</p>

<ol>
<li><p> Chaos</p></li>
<li><p> Learning</p></li>
<li><p> Self-Organizing</p></li>
</ol>


<p>This is only semantics, but when I talk to others about the different stages, people tend to understand the stages more inherently when I talk about the focal point of that stage.</p>

<p>There are some critically important things that as a lead you need to understand about these stages.</p>

<p>The most important thing a lead needs to understand is your role as a leader is completely different depending on what stage your team is in. We&rsquo;ll get into how your role changes based on each stage is later posts, but keep this in mind.</p>

<p>Secondly, from my experience, a team can go in and out of these stages. It can be cyclic, or they can jump around. It tends to be more of the former rather than the latter, but I have seen it happen both ways. As a leader, you need to keep an eye on your team and be able to identify when this change happens so that you can change your role within the team to get them back on track.</p>

<p>The goal is to grow mature, self-organizing teams. We&rsquo;ll cover more on this later, but if you can&rsquo;t wait you can always jump over to 5 whys. Roy has some great content that goes into great detail about each of these stages and how to manage them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interviewing: Done Right]]></title>
    <link href="http://josephbulger.com/blog/2011/08/19/interviewing-done-right/"/>
    <updated>2011-08-19T08:00:59-04:00</updated>
    <id>http://josephbulger.com/blog/2011/08/19/interviewing-done-right</id>
    <content type="html"><![CDATA[<p>When I conduct interviews, I want to see you code. I don&rsquo;t want to see <em><strong>your code</strong></em>, I want to see you type something from scratch. That means, brand new, as in not something you&rsquo;ve already done (or copied from somewhere else).</p>

<!-- more -->


<p>I give the same problem to all the people I interview. It helps me form a baseline and I can easily compare how one person did to another. After all, they solved <em><strong>the same problem</strong></em>. The problem I give has nothing to do with technology stacks. In fact, I usually let the user choose what language they want to do it in, and also how they want to deploy it. My preference is to watch them use some kind of testing framework, but I don&rsquo;t expect it, nor require it.</p>

<p>I also record the interview. I record it so I can refer to it later when anyone has any questions about the interview. The recordings are also a really great way to <em><strong>coach other people</strong></em> how to do the interview.</p>

<p>The algorithm/problem I give my interviewees is really simple. I mean, it&rsquo;s <em><strong>drop dead simple</strong></em>. Why make it so simple? For a couple reasons, actually.</p>

<ul>
<li>I don&rsquo;t want to be there forever.</li>
</ul>


<p>Totally selfish reason, I know, but if I hated long interviews when I was taking them, you bet I&rsquo;m going to hate them when I&rsquo;m giving them. I want it to be short. I shoot for 30 minutes, but if I&rsquo;m going over an hour there&rsquo;s a problem. This portion of the interview should only take 15 minutes. Any more than that and a flag goes off in my head.</p>

<ul>
<li>Simple problems can show you a lot about a person.</li>
</ul>


<p>Does the person take time to do it right, even if the problem is simple? Do they use TDD when they say they&rsquo;re an avid TDDer? Do they stick to principles like SRP and DIP when they say they know and use all of the SOLID principles? These things come through on simple problems, and are a lot easier to spot.</p>

<ul>
<li>Benchmarking</li>
</ul>


<p>Simple means there&rsquo;s no excuse. If I give a simple problem, no one can come back to me and say, &ldquo;how can you expect me to answer this kind of thing on the fly?&rdquo; It also lets me take how one person did and compare them to another person. Here I&rsquo;m not so much concerned about time as I am about technique.</p>

<p>When they finish with the problem I gave them they move onto the second item for the interview, which is a question or set of questions about Object Oriented Principles. I&rsquo;m not looking for the dictionary definition, either. I want a real life, come up with an example for me on the fly, kind of answer. It let&rsquo;s me watch the interviewee think. They have a chance to show me that not only can they tell me what the principles <em>are</em>, but do they <em><strong>understand them</strong></em> and can they explain them to me.</p>

<p>Again, the questions are simple for the same reasons that the problem was simple. It should be easy in concept, and thoughtful in reply. I&rsquo;ve already seen them code, so I should have seen some of these concepts in action, but I need to make sure they <em><strong>know what they&rsquo;re typing</strong></em>. If you can&rsquo;t tell someone else what you&rsquo;re doing, then when you work on a team you won&rsquo;t be able to explain to your team mates what you&rsquo;ve implemented, even if it&rsquo;s good code. Contrary to what most people might think, <em><strong>communication is more important than your coding skills</strong></em>.</p>

<p>However, doing an interview right only get&rsquo;s us part of the way there. We also need to know how to do is easy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interviewing: How Many Questions Can You Answer in 30 Minutes?]]></title>
    <link href="http://josephbulger.com/blog/2011/08/18/interviewing-how-many-questions-can-you-answer-in-30-minutes/"/>
    <updated>2011-08-18T08:00:22-04:00</updated>
    <id>http://josephbulger.com/blog/2011/08/18/interviewing-how-many-questions-can-you-answer-in-30-minutes</id>
    <content type="html"><![CDATA[<p>I&rsquo;m not the kind of person that really get&rsquo;s turned off by interviews. I actually enjoy them sometimes. It can be a good test of my skills and knowledge. A lot of the time it shows me whether or not I&rsquo;m good at explaining what I know. Communication is very important to me in my career. Lately, however, I&rsquo;ve taken a different role in the interviewing process. I&rsquo;ve become the one giving them instead of taking them. I thought today would be a good day to talk about interviews I&rsquo;ve had, and what kind of interviews I think make up &ldquo;good&rdquo; interviews, and which one&rsquo;s I think are &ldquo;bad&rdquo;.</p>

<!-- more -->


<p>Let&rsquo;s start of with the title of this post. I work in a technical field. All of the &ldquo;first time&rdquo; interviews I&rsquo;ve had almost always end up the same way. I spend about 30 minutes (probably more) talking with some person about my skill set and whether or not I&rsquo;d be a good fit for the job they&rsquo;re asking me about. I&rsquo;ll put these people into two buckets, the good ones and the bad ones.</p>

<p>The good people that I talk to always do it the same way. They don&rsquo;t really ask me any questions at all. They tell me exactly what the position is, where it&rsquo;s located, any skills that are absolutely required, the salary range (usually), etc. The key here is that they&rsquo;re the ones talking. They aren&rsquo;t asking me any technical questions. This is vitally important. The &ldquo;first time&rdquo; call should only be about 2 things: do I exist? and how interested am I in this position? A really good recruiter, or whatever you want to call them, will keep this call <em><strong>very</strong></em> short. Some times I&rsquo;ve had them be only 10 minutes. I would love for them to be only 5, but that&rsquo;s not usually feasible because recruiters really like to go into details about the positions they&rsquo;re filling.</p>

<p>The bad people grill you. And a lot of times they grill you for a <em><strong>really really long time</strong></em>. I think I&rsquo;ve had first time calls last me over an hour with someone asking me all sorts of questions about &ldquo;do I know this&rdquo; and &ldquo;do I know that&rdquo;. The problem with first time calls asking you a lot of questions is really quite simple. How would they know if I&rsquo;m lying? They <em><strong>wouldn&rsquo;t</strong></em>. They wouldn&rsquo;t know because they&rsquo;re <em><strong>not technical people</strong></em>. The problem is usually with these bad first time calls is that they <em><strong>don&rsquo;t have a second call</strong></em>. Once they talk to you and get the obligatory &ldquo;this guy said yes to all my questions, he must be totally awesome!&rdquo; run through, for all intensive purposes <em><strong>they&rsquo;re done</strong></em>.</p>

<p>This can really be a nightmare from a positioning standpoint. Companies get ridiculous turn over on resources because they don&rsquo;t take the time to find the right person for the right job. It seems like common sense that you would want to evaluate someone on what they do before they are hired. The stance on this this in the tech industry has been varied, though. A lot of people think that asking questions is sufficient. That someone being asked complicated enough questions who doesn&rsquo;t know what&rsquo;s being asked will just buckle under the pressure. Unfortunately that has caused our industry to become full of professional BSers. Other people think that you&rsquo;ll never really know if someone is worth their grain of salt until you try them out. This is somewhat true, but doing <em><strong>nothing</strong></em> about it will only land you with the same group, the BSers.</p>

<p>I&rsquo;m joining the side that will be responsible for ridding our industry of these people. My position on this is simple. If you want a job as a professional developer, <em><strong>show me teh codez</strong></em>. Talk is cheap, I want to see you code.</p>

<p>And that&rsquo;s how I interview. Get ready to see some code.</p>
]]></content>
  </entry>
  
</feed>
