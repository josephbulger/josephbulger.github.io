<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vacationeer Guide | Joseph Bulger]]></title>
  <link href="http://josephbulger.com/blog/categories/vacationeer-guide/atom.xml" rel="self"/>
  <link href="http://josephbulger.com/"/>
  <updated>2014-08-25T19:20:54-04:00</updated>
  <id>http://josephbulger.com/</id>
  <author>
    <name><![CDATA[Joseph Bulger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vacationeer's Guide: Projections]]></title>
    <link href="http://josephbulger.com/blog/2011/08/17/vacationeers-guide-projections/"/>
    <updated>2011-08-17T08:00:10-04:00</updated>
    <id>http://josephbulger.com/blog/2011/08/17/vacationeers-guide-projections</id>
    <content type="html"><![CDATA[<p>When you plan a road trip, you&rsquo;re really only concerned about figuring out one thing: how long will it take me to get there? But for projects, this isn&rsquo;t always the case. The same formula applies, though.<!-- more --></p>

<p>Now that we know how to measure out velocity, we can use that metric to figure out one of two fundamental things:</p>

<ol>
<li><p> How long will it take us to get there?</p></li>
<li><p> How far will we get?</p></li>
</ol>


<p>Velocity can&rsquo;t answer both questions for us, but if we&rsquo;re willing to concede and control one of the two variables, either the distance or the time, then we can project what the other thing will be.</p>

<p>For example, if the team is getting pressure to release by a certain date (sound familiar?), then with your velocity you can project how many features you&rsquo;ll actually have done by that time frame. If, however, the team is under pressure to get Awesome Feature X done and released, then you can use the same formula to project when that feature will be done.</p>

<p>With road trips my family almost always chooses to control the distance and project the time. My wife wants to go to Disney World, for example. That&rsquo;s choosing the distance factor. Now if I know my velocity I can project how long it will take us to get there. On the other hand, some times we want to do a quick weekend trip to somewhere just to get out for a few days. In those cases, we&rsquo;re bound more by time, because we don&rsquo;t want to be on the road the whole weekend. In that case, we constrain our time window, and see how far that will take us.</p>

<p>This is where the real power of knowing velocity comes from. Your implementation team is the engine of you car. Understanding velocity and how it works and what it means to your team is like having a speedometer. Until you know about velocity, you&rsquo;re like driving a car with a broken speedometer.</p>

<p>A lot of common questions of project management start being fundamentally changed when you introduce velocity. For example, a question like, &ldquo;How do I make my team work faster?&rdquo; changes to something like &ldquo;How do I increase my team&rsquo;s velocity?&rdquo; I&rsquo;ve seen this happen almost any time that a team embraces these concepts, and it&rsquo;s not only a change in the wording of the question that is profound, but in the meaning of what is behind it. Velocity is a historical metric for your team&rsquo;s progress, so asking a question like how to make that number go higher because a much more scientific question completely. The answer is can be varied, but it all comes back to where it started, with the velocity. Try something out on your team, then wait and see how your velocity changes. You&rsquo;re doing an experiment now. Not only that, but you know how to <em><strong>measure the results</strong></em>.</p>

<p>Enjoy your new found technique. If you have any questions or comments feel free to contact me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vacationeer’s Guide: Determining Your Team's Velocity]]></title>
    <link href="http://josephbulger.com/blog/2011/08/16/vacationeer-guide-determining-your-teams-velocity/"/>
    <updated>2011-08-16T08:00:54-04:00</updated>
    <id>http://josephbulger.com/blog/2011/08/16/vacationeer-guide-determining-your-teams-velocity</id>
    <content type="html"><![CDATA[<p>Once your team has estimated a set of features, and assigned each feature their &ldquo;point value&rdquo;, it&rsquo;s time to start measuring your team&rsquo;s velocity!</p>

<!-- more -->


<p>Measuring your team&rsquo;s velocity is actually an easy thing to do. Your team will start working in release cycles that are broken down into parts. The lead or the project manager is usually a good role for determining how long these cycles should be. Some teams will have a release cycle of 3 weeks. Others will have longer cycles, it&rsquo;s completely flexible. The key is to stay <em><strong>consistent</strong></em>. Once you make a choice on your cycle, you need to stick to it. The reason will become clear later.</p>

<p>The other thing to note here is that you can break down your release cycles into parts. My team calls them Iterations. I have some teams that work on 1 week iterations. I have other teams that work 3 week iterations. One team I lead has a 2 week iteration. The release cycles for all these teams are different, too. Some teams release at the end of every iteration. Other teams release every 2 iterations. I&rsquo;ve worked on teams where the planning of the release was done more rigidly because of customers, and we would release every quarter or maybe 6 months. The point with those teams was not so much about the release cycle, but that the iteration cycle was still small. The largest iteration cycle I&rsquo;ve worked on was 4 weeks long I think.</p>

<p>The point of the cycle here is to do one thing: allow your team a consistent amount of time to work on an attainable goal. That attainable goal is a certain number of features. How many features you ask? It completely depends on your team&rsquo;s velocity! But when you first start, you don&rsquo;t have a velocity, so you have to do a couple cycles just to figure out what the team can do.</p>

<p>So say you have 30 features to work on. You decide to have your team work in 3 week cycles. At the end of their first cycle, they complete 3 features. One of the features was valued at 5 points (from the estimation sessions, remember), and the other 2 were valued at 3 points. That means the first cycle your team finished with a velocity of 11. That&rsquo;s all there is to it! Now you repeat the same process over again. Do another cycle. Maybe the team got 15 points completed. Now average the two cycles together. The team&rsquo;s velocity becomes 13. Rinse. Repeat. That&rsquo;s how velocity is measured.</p>

<p>This is why your cycles have to be consistent, because you&rsquo;re taking an average of the points your team completes. If you change the cycle length, then it messes up your velocity values. Now, having said that, there are points where it&rsquo;s appropriate to change the cycle. I&rsquo;ve done it many times before, but you have to account the change in your velocity calculations when you do it.</p>

<p>Now that we know how to measure velocity, we can use it to figure out things, which is our next topic:</p>

<blockquote><p>Projections</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vacationeer’s Guide: Credit System]]></title>
    <link href="http://josephbulger.com/blog/2011/08/15/vacationeer-guide-credit-system/"/>
    <updated>2011-08-15T08:00:51-04:00</updated>
    <id>http://josephbulger.com/blog/2011/08/15/vacationeer-guide-credit-system</id>
    <content type="html"><![CDATA[<p>Now that we understand the concept of estimation, we need to talk about how this &ldquo;credit system&rdquo; applies to our velocity.</p>

<!-- more -->


<p>When your team goes through estimation, each feature needs to be assigned some &ldquo;credit&rdquo; so that you can then use that amount for projection and release management. The issue is what you use as your &ldquo;credit&rdquo;. A common idea would be to use &ldquo;work time&rdquo; as the credit. There are a couple problems with work time, though. First, each team member&rsquo;s work time is different, because their productivity levels are different. This means that when they estimate they would have to think about how much time it would take for them to complete the feature, which is always going to be different with the other members, so they won&rsquo;t be able to come to a consensus. They have to come to a consensus when estimating each feature, so work time won&rsquo;t work.</p>

<p>Since we know we can&rsquo;t use a metric that varies on each team member, we need to pick something that is relative and allows the team to vote as a whole. That&rsquo;s why my teams use a concept of &ldquo;points&rdquo;. We use a modified version of the Fibonacci sequence (i.e. 0, &frac12;, 1, 2, 3, 5, 8, 13, 21, 34, infinity). We don&rsquo;t go past 34 usually because after that the risk that the estimation is significantly wrong is too high. That brings us to another point worth mentioning.</p>

<p>When you are estimating how long it takes to do something, it&rsquo;s better to try to keep your features small. The same is true for road trip planning. If I am planning a trip just outside of Atlanta (where I live), then it&rsquo;s a lot easier for me to figure out how long it&rsquo;ll take me to get there. If I&rsquo;m just going up the road, then I might even be able to get my travel time figured out down to five minutes. The farther away I go, the harder it is to accurately estimate. With a trip as far  as Orlando, I know I&rsquo;m only accurate within an hour or two. That&rsquo;s a much larger margin of error than five minutes!</p>

<p>The same is true in estimation and your credits. If you assign a feature a large amount of credits, then the margin of error is much larger for that feature. That&rsquo;s also the reason why we don&rsquo;t just let the team pick any number they want. If a team member is having trouble between an 8 and a 13, they have to pick one or the other, they can&rsquo;t say &ldquo;I really want to choose 10&rdquo;. The point here is that there&rsquo;s a margin of error because of the uncertainty, and the Fibonacci sequence shows that uncertainty in the estimations very well.</p>

<p>Once you&rsquo;ve identified your credit system, then you can use that system to determine your team&rsquo;s velocity. And that brings us to our next topic:</p>

<blockquote><p>Determining your team&rsquo;s velocity</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vacationeer’s Guide: Estimation]]></title>
    <link href="http://josephbulger.com/blog/2011/08/12/vacationeer-guide-estimation/"/>
    <updated>2011-08-12T04:00:50-04:00</updated>
    <id>http://josephbulger.com/blog/2011/08/12/vacationeer-guide-estimation</id>
    <content type="html"><![CDATA[<p>In order to calculate velocity, we need to know how to figure out the amount of effort involved for each feature that a team works on. Before we can get to that, though, we need to determine something else which is crucial. <em><strong>Who</strong></em>, exactly, should be estimating the effort?</p>

<!-- more -->


<p>Let&rsquo;s start by identifying the major players here. We have users, clients, managers, leads, analysts, and the implementation team.</p>

<p>Let&rsquo;s start with the easy ones. The users and clients really wouldn&rsquo;t have any idea of how much effort it would take. Sure, they have an idea of the benefit, which relates to the <a href="http://en.wikipedia.org/wiki/Return_on_investment">ROI</a>, but not the effort. That leaves us with the rest of the actual team.</p>

<p>Who among the rest of the team would know how long it takes to build something? The people <em><strong>doing the building</strong></em>. Who does that<em><strong> not</strong></em> include? Managers, analysts, and maybe leads depending on their role. The implementation team knows how long it takes to build things, because they&rsquo;re the ones building it in the first place. They may not know, however, <em><strong>what</strong></em> it is that their building. That&rsquo;s where the analysts, leads, and most importantly, users and clients, come in. They are there to help the implementation team understand the features so they can give a good estimate on the effort involved.</p>

<p>One thing of note here that might not be so obvious is how does the estimation get done? Let&rsquo;s say you have 3 people on your implementation team. Do you assign Feature A to team member X and ask X how long it&rsquo;s going to take to do A? No. The reason you don&rsquo;t do this is simple. Why is surveying so popular? Because statistically speaking, if you perform a survey correctly, you can be relatively confident in the results of the survey. Or in other words, the more people that are willing to say &ldquo;Feature A is going to take X long&rdquo;, the more confident you can be that those people are correct. If I asked my entire team of 10 members, and you asked only 1 member of your team, which estimate do you think we would be more confident in? That&rsquo;s not to say that it would be <em><strong>right</strong></em>, but it&rsquo;s more likely to be right.</p>

<p>Is it as simple as getting everyone together and going over the features and just saying how long it&rsquo;s going to take? Well, not exactly.</p>

<p>We also need to talk about our credit system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vacationeer’s Guide: Velocity]]></title>
    <link href="http://josephbulger.com/blog/2011/08/11/vacationeer-guide-velocity/"/>
    <updated>2011-08-11T04:00:05-04:00</updated>
    <id>http://josephbulger.com/blog/2011/08/11/vacationeer-guide-velocity</id>
    <content type="html"><![CDATA[<p>Velocity is the key to any project&rsquo;s success. Plain and simple. I think that just about every project in some way or another tries to figure out this metric. It&rsquo;s <em><strong>how</strong></em> this metric is obtained that is so important.</p>

<!-- more -->


<p>Let&rsquo;s say hypothetically that you&rsquo;re leading a team. How would you<em><strong> want</strong></em> to measure this metric?</p>

<p>Do you want to gauge this metric from your users? Maybe they could tell you in terms of features how fast your team is. An example of that might be, &ldquo;It took Widget Company 6 months to produce a new release with 3 major features, and 2 minor features.&rdquo; There&rsquo;s a problem here, though. How do you know how much <em><strong>effort</strong></em> it took to accomplish these features? Users may call a feature major or minor, but that certainly has no correlation to the effort involved to produce that feature. So that won&rsquo;t work.</p>

<p>Does the project manager know what the metric is? To answer that question I would ask: Does the project manager have any more information about the <em><strong>effort involved for each feature</strong></em> than the users from the previous example? If the answer is no, then you&rsquo;re in the same situation.</p>

<p>Leads have the same problem. Even technical leads, who actually know exactly what&rsquo;s going on with their teams at all times, and probably even do a fair bit of the coding themselves, can&rsquo;t figure out the effort by themselves. They&rsquo;re missing the information just like everyone else.</p>

<p>And this is where we&rsquo;re left. We need to know what the <em><strong>effort</strong></em> is. How can we figure out the effort? Well, what if we estimated the effort involved for each feature, and then tracked the progress of the team for each feature. After they completed that feature, we could give them &ldquo;credit&rdquo; for that effort. Then we could use this &ldquo;credit&rdquo; as a way of describing how fast our team works.</p>

<p>The trick to understanding this &ldquo;credit system&rdquo; is in our next topic:</p>

<blockquote><p>Estimation</p></blockquote>
]]></content>
  </entry>
  
</feed>
